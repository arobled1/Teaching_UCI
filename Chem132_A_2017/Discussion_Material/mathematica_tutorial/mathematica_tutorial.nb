(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    185373,       4049]
NotebookOptionsPosition[    175899,       3731]
NotebookOutlinePosition[    176257,       3747]
CellTagsIndexPosition[    176214,       3744]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Welcome to Mathematica! ",
 FontSize->36]], "Section",
 CellChangeTimes->{
  3.71286089413424*^9, {3.715827358417288*^9, 3.7158273701950827`*^9}}],

Cell[TextData[{
 "For those who already have experience with Mathematica, this lesson will \
seem simple, but there are a few things that courses such as Chem 5 do not \
show you. So you may want to look at the last section (section 9).\n\n",
 StyleBox["NOTE: If you are not using a Mac, the ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["ctrl ",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["key on your keyboard can be replaced in every instance that I \
mention pressing the ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["Command",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" key. Yes, this notebook was written using a Mac.",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",
 CellChangeTimes->{
  3.712860886019793*^9, {3.715641004996636*^9, 3.7156410065087633`*^9}, {
   3.715818754895846*^9, 3.7158188564742813`*^9}, {3.715827358451117*^9, 
   3.715827369497254*^9}, {3.715827417470262*^9, 3.715827427187117*^9}, {
   3.715893270211608*^9, 3.715893324822423*^9}, {3.715893361471382*^9, 
   3.715893414910822*^9}, {3.715896555105238*^9, 3.7158965553916273`*^9}}],

Cell[CellGroupData[{

Cell["1) Using Plain Text", "Subsection",
 CellChangeTimes->{{3.7128610459181967`*^9, 3.712861057325159*^9}, {
  3.715893328278406*^9, 3.715893328662281*^9}, {3.71589355846656*^9, 
  3.71589357602706*^9}, {3.71589362320853*^9, 3.715893658289262*^9}, {
  3.715893700664482*^9, 3.715893703936441*^9}}],

Cell[CellGroupData[{

Cell["1.1) Adding Comments", "Subsubsection",
 CellChangeTimes->{{3.715893593172098*^9, 3.715893625728654*^9}, {
  3.715893710429824*^9, 3.715893715006013*^9}}],

Cell[TextData[{
 "To start, we can add plain text to any notebook in ",
 "Mathematica",
 " by going to the ",
 StyleBox["Writing Assistant",
  FontWeight->"Bold"],
 " under ",
 StyleBox["Palettes",
  FontWeight->"Bold"],
 " at the top of your screen and clicking on ",
 StyleBox["Text cell",
  FontWeight->"Bold"],
 ". The writing assistant will stay on the right side of your screen for the \
rest of the session until you decide to close it. "
}], "Text",
 CellChangeTimes->{{3.712860321652958*^9, 3.712860327986781*^9}, {
  3.712860417016642*^9, 3.712860479255357*^9}, {3.715640915344318*^9, 
  3.715640922984377*^9}, {3.715641015429021*^9, 3.715641027079845*^9}, {
  3.715827301383544*^9, 3.71582731428336*^9}, {3.71582735773116*^9, 
  3.71582736952521*^9}}],

Cell[TextData[{
 "Every new cell created is defaulted to only letting you type commands and \
can\[CloseCurlyQuote]t be used to display general text. To convert a new cell \
to allow plain text, you can use the shortcut ",
 StyleBox["Command-7",
  FontWeight->"Bold"],
 " instead of having to go to the writing assistant every time. When you want \
to use a new cell, you can click on the empty space below your current cell \
or press on the down arrow key once. "
}], "Text",
 CellChangeTimes->{{3.7128603311387*^9, 3.712860354672227*^9}, {
   3.712860485943491*^9, 3.712860498095686*^9}, {3.712860585247595*^9, 
   3.712860627952951*^9}, {3.7128606662522*^9, 3.712860717123993*^9}, {
   3.712860755878744*^9, 3.7128608615225887`*^9}, {3.715640885574749*^9, 
   3.7156409071520147`*^9}, {3.715705099178258*^9, 3.715705104601171*^9}, {
   3.7157169257780313`*^9, 3.715716925804524*^9}, {3.7158934815047293`*^9, 
   3.71589348293618*^9}, 3.7158964151877317`*^9}],

Cell[TextData[{
 "To add a title to your notebook, you can go to ",
 StyleBox["Title cells ",
  FontWeight->"Bold"],
 "in the writing assistant or press ",
 StyleBox["Command-4",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Command-5",
  FontWeight->"Bold"],
 " depending on whether you want define a section or a subsection. The \
\[OpenCurlyDoubleQuote]Welcome to Mathematica\[CloseCurlyDoubleQuote] at the \
beginning of this notebook was made using ",
 StyleBox["Command-4",
  FontWeight->"Bold"],
 ", while the \[OpenCurlyDoubleQuote]Adding text\[CloseCurlyDoubleQuote] was \
made using ",
 StyleBox["Command-5",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{
  3.712860850820943*^9, {3.712860900404567*^9, 3.712861027767827*^9}, {
   3.712861060733521*^9, 3.71286108416395*^9}, 3.712861208723342*^9, {
   3.715640939152774*^9, 3.715640979353911*^9}, {3.7156410726095943`*^9, 
   3.7156410875861673`*^9}, {3.7157050992095947`*^9, 3.7157050993026648`*^9}, 
   3.7158964178974457`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.2) Adding Equations", "Subsubsection",
 CellChangeTimes->{{3.715893667989244*^9, 3.715893686200056*^9}, {
  3.7158937272463617`*^9, 3.715893727822266*^9}}],

Cell[TextData[{
 "If you want to write out equations or add math symbols in plain text, you \
can use the ",
 StyleBox["Basic Math Asssitant",
  FontWeight->"Bold"],
 " that\[CloseCurlyQuote]s also under ",
 StyleBox["Palettes",
  FontWeight->"Bold"],
 " and look through the ",
 StyleBox["Typesetting",
  FontWeight->"Bold"],
 " section. You can use this to write out equations that look like this: \n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{" ", 
      RowBox[{"-", "\[Infinity]"}]}], 
     RowBox[{" ", "\[Infinity]"}]], 
    RowBox[{
     SuperscriptBox["e", 
      RowBox[{"-", 
       SuperscriptBox["x", "2"]}]], "dx"}]}], TraditionalForm]],
  FontSize->16],
 StyleBox[" = 0\n",
  FontSize->16],
 "\[ContourIntegral]",
 StyleBox[" dS",
  FontSize->16],
 StyleBox[" ",
  FontSize->16,
  FontSlant->"Italic"],
 StyleBox["= 0 ",
  FontSize->16],
 "\[DoubleLongRightArrow]",
 StyleBox[" 0 ",
  FontSize->16],
 "\[GreaterEqual]",
 StyleBox[" ",
  FontSize->16],
 Cell[BoxData[
  FormBox[
   FractionBox["\[Delta]q", "T"], TraditionalForm]],
  FontSize->16],
 "\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["PbSO", 
      RowBox[{"4", 
       RowBox[{"(", "s", ")"}]}]], "\[LongRightArrow]", " ", 
     SuperscriptBox[
      SubscriptBox["Pb", 
       RowBox[{"(", "aq", ")"}]], 
      RowBox[{"2", "+"}]]}], "+", 
    SuperscriptBox[
     SubscriptBox["SO", 
      RowBox[{"4", 
       RowBox[{"(", "aq", ")"}]}]], 
     RowBox[{"2", "-"}]]}], TraditionalForm]],
  FontSize->16]
}], "Text",
 CellChangeTimes->{{3.7128613936529903`*^9, 3.712861831928883*^9}, {
   3.712861946917234*^9, 3.712862029295403*^9}, {3.7128620600618134`*^9, 
   3.7128620739217987`*^9}, {3.7134783064369583`*^9, 3.713478309156464*^9}, {
   3.715641099850607*^9, 3.715641119083143*^9}, 3.7158936940165462`*^9}],

Cell[TextData[{
 "To make font larger and smaller, press ",
 StyleBox["Command-(+) ",
  FontWeight->"Bold"],
 "or ",
 StyleBox["Command-(-).",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.715893791498801*^9, 3.715893815912442*^9}}],

Cell["\<\
With that, you can now write out any homework assignment for any class on a \
Mathematica notebook! \
\>", "Text",
 CellChangeTimes->{{3.712862093963662*^9, 3.712862116732544*^9}, {
   3.715827301413376*^9, 3.7158273137310333`*^9}, {3.7158273577597227`*^9, 
   3.715827369553755*^9}, 3.715827432931082*^9, 3.7158937960638237`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2) Basic arithmetic", "Subsection",
 CellChangeTimes->{{3.712866285711759*^9, 3.712866288093748*^9}, {
  3.712866324725842*^9, 3.7128663350461063`*^9}, {3.7128664560754347`*^9, 
  3.712866460345846*^9}, {3.7128678892440863`*^9, 3.7128678904983797`*^9}, {
  3.715893331302429*^9, 3.715893333238401*^9}}],

Cell[TextData[{
 "When you want Mathematica to evalue a cell, you can press ",
 StyleBox["Shift-Enter",
  FontWeight->"Bold"],
 ". Try it with this input below: "
}], "Text",
 CellChangeTimes->{{3.7128664643778667`*^9, 3.712866498251062*^9}, {
   3.71286653298836*^9, 3.71286657137356*^9}, {3.712866621767809*^9, 
   3.712866716721862*^9}, 3.712867677993424*^9, {3.715641333801639*^9, 
   3.71564133708976*^9}, 3.715705104408091*^9, 3.71571680299971*^9, {
   3.715717025709626*^9, 3.715717025860009*^9}, {3.7158273008621807`*^9, 
   3.715827313760414*^9}, {3.715827357789489*^9, 3.715827369582572*^9}, 
   3.7158274337311487`*^9, 3.715896595138591*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "+", "2"}]], "Input",
 CellChangeTimes->{{3.712866629067212*^9, 3.712866629663988*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.715641637893197*^9, 3.71564166246651*^9}, 
   3.715896600129985*^9}]
}, Open  ]],

Cell[TextData[{
 "If you want to delete an entire cell, you can click on the bracket to the \
right of the cell and press ",
 StyleBox["delete ",
  FontWeight->"Bold"],
 "on your keyboard. If you delete something that you didn\[CloseCurlyQuote]t \
want to delete, use ",
 "Command",
 StyleBox["-Z",
  FontWeight->"Bold"],
 " to undo the mistake."
}], "Text",
 CellChangeTimes->{{3.7128676820881844`*^9, 3.7128678461853743`*^9}, {
  3.715641478046961*^9, 3.7156415417445173`*^9}, {3.715641677729357*^9, 
  3.715641678265379*^9}, {3.715705081467176*^9, 3.715705099145007*^9}}],

Cell[TextData[{
 "( + ) and ( - ) indicate addition and subtraction, respectively, but the \
asterisk ( * ) and ( / ) indicate multiplication and division, respectively. \
If you want to define exponentials, you use ( ^ )",
 StyleBox[" ",
  FontWeight->"Bold"],
 " when creating the exponent. You can also use the ",
 StyleBox["Basic Math Assistant",
  FontWeight->"Bold"],
 " to type out your equations. "
}], "Text",
 CellChangeTimes->{{3.712866754940371*^9, 3.712866824045422*^9}, {
   3.7128668578403*^9, 3.712867061637444*^9}, {3.7128671405347853`*^9, 
   3.712867235290286*^9}, {3.715641559496952*^9, 3.715641581977656*^9}, {
   3.715716895291955*^9, 3.715716916242077*^9}, {3.7157169492185163`*^9, 
   3.715716952842745*^9}, 3.715896420601342*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"4", "^", "4"}]], "Input",
 CellChangeTimes->{{3.7128670217564774`*^9, 3.712867029084448*^9}}],

Cell[BoxData["256"], "Output",
 CellChangeTimes->{3.715641640915738*^9}]
}, Open  ]],

Cell["\<\
Mathematica also follows the standard order of operations, which is the \
PEMDAS logic that you learned a long time ago in math. This means that in any \
expression you define, Mathematica will evaluate (from left to right) \
anything in parantheses first, then exponents (powers or roots), then \
multiplication and division, and then addition and subtraction. \
\>", "Text",
 CellChangeTimes->{{3.712867238601777*^9, 3.7128672690898952`*^9}, {
   3.712867316059744*^9, 3.712867359503894*^9}, {3.71286748717003*^9, 
   3.712867491753831*^9}, {3.71286754218781*^9, 3.712867546019556*^9}, {
   3.712867600127733*^9, 3.7128676105497103`*^9}, {3.715641595234885*^9, 
   3.7156415990178633`*^9}, {3.715827300890877*^9, 3.715827313820915*^9}, {
   3.715827357820078*^9, 3.715827369645249*^9}, 3.7158274360319967`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"4", "-", 
  RowBox[{"5", "/", "5"}], "+", 
  RowBox[{"2", "*", "3"}]}]], "Input",
 CellChangeTimes->{{3.71286707699666*^9, 3.712867130485469*^9}, {
  3.7128673818464622`*^9, 3.712867385412516*^9}, {3.715713045360602*^9, 
  3.715713080023118*^9}}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{
  3.7156416424843884`*^9, {3.715713049779264*^9, 3.7157130805396852`*^9}}]
}, Open  ]],

Cell["\<\
In this example, 5 / 5 and 2 * 3 were evaluated first, leaving 4 - 1 + 6 . \
Since Mathematica evaluates an expression from left to right, it gave 3 + 6 \
rather than 4 - 7. \
\>", "Text",
 CellChangeTimes->{{3.712867424638579*^9, 3.712867530835114*^9}, {
  3.712867618358171*^9, 3.712867629349021*^9}, {3.7158273009517727`*^9, 
  3.715827313851647*^9}, {3.715827357881386*^9, 3.715827369675519*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["3) Commonly used numbers", "Subsection",
 CellChangeTimes->{{3.712867896861804*^9, 3.712867903389879*^9}, {
  3.7128679546359997`*^9, 3.712867955371449*^9}, {3.715893336037812*^9, 
  3.715893336494399*^9}}],

Cell["\<\
Mathematica has constants that are built in and never have to be defined such \
as \[Pi], e, and the imaginary number i.\
\>", "Text",
 CellChangeTimes->{{3.712867906021843*^9, 3.712868015886242*^9}, {
  3.7156416942896767`*^9, 3.71564169496982*^9}, {3.715827300982304*^9, 
  3.7158273138821583`*^9}, {3.715827357912258*^9, 3.7158273697064247`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["Pi"], "Input",
 CellChangeTimes->{{3.712868024807987*^9, 3.712868025023193*^9}}],

Cell[BoxData["\[Pi]"], "Output",
 CellChangeTimes->{3.71286802541003*^9, 3.7134783874922323`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["E"], "Input",
 CellChangeTimes->{3.712867996330531*^9}],

Cell[BoxData["\[ExponentialE]"], "Output",
 CellChangeTimes->{3.712867996942894*^9, 3.713478389970934*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["I"], "Input",
 CellChangeTimes->{3.712868029276758*^9}],

Cell[BoxData["\[ImaginaryI]"], "Output",
 CellChangeTimes->{3.712868029892531*^9, 3.713478392189753*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I", "^", "2"}]], "Input",
 CellChangeTimes->{{3.7128680382472353`*^9, 3.712868039239746*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.712868039930616*^9, 3.713478394246616*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4) Variables ", "Subsection",
 CellChangeTimes->{{3.712868073609071*^9, 3.71286807655206*^9}, {
   3.71286811891757*^9, 3.712868144622575*^9}, {3.7128684521373997`*^9, 
   3.7128684540649137`*^9}, {3.7158933381425753`*^9, 3.7158933393425817`*^9}, 
   3.715893901188858*^9}],

Cell["\<\
You can define a variable by simply using any letter of your choice followed \
by an equal sign and whatever numerical value you want to assign to the \
variable. \
\>", "Text",
 CellChangeTimes->{{3.712868112565103*^9, 3.7128682176803827`*^9}, {
  3.7128878171605377`*^9, 3.7128878181109457`*^9}, {3.7156417067461433`*^9, 
  3.715641712938284*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "=", "1"}]], "Input",
 CellChangeTimes->{{3.7128681507237797`*^9, 3.712868187024029*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.71286822443286*^9, 3.7134783975916452`*^9}]
}, Open  ]],

Cell[TextData[{
 "To tell if your variable already has something assigned to it or not, the \
variable will be blue if nothing has been assigned to it and the variable \
will be black if there is something assigned to it. \nTo make a variable \
free, use the ",
 StyleBox["Clear ",
  FontWeight->"Bold"],
 "function. ",
 "Mathematica",
 " won\[CloseCurlyQuote]t give any output when you use ",
 StyleBox["Clear",
  FontWeight->"Bold"],
 " and will simply turn the variable blue again. "
}], "Text",
 CellChangeTimes->{{3.712868229002756*^9, 3.7128682411504927`*^9}, {
  3.7128683127829437`*^9, 3.7128685162106867`*^9}, {3.715641741178957*^9, 
  3.715641806623756*^9}, {3.715705104439076*^9, 3.715705104471199*^9}, {
  3.715713487186451*^9, 3.7157134872976847`*^9}, {3.715717036909945*^9, 
  3.7157170629329977`*^9}, {3.715827301013204*^9, 3.7158273139120913`*^9}, {
  3.715827357942477*^9, 3.71582736973698*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.7128684416779003`*^9, 3.712868443842767*^9}}],

Cell["\<\
If you\[CloseCurlyQuote]re assigning multiple variables and you don\
\[CloseCurlyQuote]t want to display the output, add a semicolon ( ; ) after \
any assignment.\
\>", "Text",
 CellChangeTimes->{{3.715642769755485*^9, 3.715642853164345*^9}, 
   3.71589431294628*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"k", "=", "2"}], ";"}]], "Input",
 CellChangeTimes->{{3.715642861593351*^9, 3.715642867725512*^9}}],

Cell[TextData[{
 "There are a few things to keep in mind when your notebook contains a lot of \
variables. Variable names are case sensitive, so \[OpenCurlyDoubleQuote] A \
\[OpenCurlyDoubleQuote] and  \n\[OpenCurlyDoubleQuote] a \
\[OpenCurlyDoubleQuote] can be defined as different variables. Although, it\
\[CloseCurlyQuote]s good practice to stick to one convention (i.e. making all \
variable names upper-case or making all variable names lower-case). You also \
cannot use the dash symbol ( - ) or the underscore ( ",
 StyleBox["_ ",
  FontWeight->"Bold"],
 ")",
 StyleBox[" ",
  FontWeight->"Bold"],
 " when defining variables like you can in other programming languages. \
Mathematica will give you an error message if you try to use dashes or \
underscores in your variable names."
}], "Text",
 CellChangeTimes->{{3.712946760342745*^9, 3.712946770783277*^9}, {
   3.712947013025434*^9, 3.712947365427952*^9}, {3.71294741294802*^9, 
   3.712947616432673*^9}, 3.7129477787100697`*^9, {3.712947864593336*^9, 
   3.7129478967137117`*^9}, {3.715641860080265*^9, 3.715641874740991*^9}, 
   3.7156443577082357`*^9, {3.7158273010445127`*^9, 3.715827313942583*^9}, {
   3.715827357973667*^9, 3.715827369767664*^9}, 3.7158943145225058`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["5) Functions", "Subsection",
 CellChangeTimes->{{3.7158939108133087`*^9, 3.715893917854018*^9}}],

Cell["\<\
Mathematica has hundreds of thousands of built in functions/commands (not to \
be confused with functions in math), but there are only a few that will be \
useful to memorize. Generally, the argument of a function in Mathematica is \
enclosed in square brackets and the name of the function is also case \
sensitive. The names of Mathematica\[CloseCurlyQuote]s built in functions \
typicallly start with a capital letter followed by lowercase letter(s).\
\>", "Text",
 CellChangeTimes->{{3.712887852928893*^9, 3.712887954435903*^9}, {
   3.712888024651834*^9, 3.712888025546878*^9}, {3.7128880615576057`*^9, 
   3.71288808649271*^9}, {3.7128883219955072`*^9, 3.712888341787764*^9}, {
   3.71288872996208*^9, 3.71288874192201*^9}, {3.712946658158597*^9, 
   3.712946751696774*^9}, 3.7129478591064787`*^9, {3.7129479093705606`*^9, 
   3.712947973444798*^9}, {3.715716842018467*^9, 3.71571684299205*^9}, {
   3.715827301074655*^9, 3.715827313972928*^9}, {3.715827358003922*^9, 
   3.7158273697988167`*^9}, {3.715893921197562*^9, 3.715893961566642*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sqrt", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.7129484401741743`*^9, 3.712948442489196*^9}}],

Cell[BoxData[
 SqrtBox["2"]], "Output",
 CellChangeTimes->{3.712948443347177*^9, 3.71347840624858*^9}]
}, Open  ]],

Cell["\<\
Mathemtica by default uses the natural logarithm, (i.e. a logarithm with base \
e). \
\>", "Text",
 CellChangeTimes->{{3.7129485137756042`*^9, 3.7129485926446657`*^9}, 
   3.7129487454498463`*^9, 3.7158941376161623`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", "E", "]"}]], "Input",
 CellChangeTimes->{{3.7129484875622*^9, 3.712948493203504*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.712948493752668*^9, 3.7134784092837467`*^9}]
}, Open  ]],

Cell[TextData[{
 "If you want to compute the logarithm with a different base, you can use ",
 StyleBox["Log[b, c]",
  FontWeight->"Bold"],
 " , where b is the base and c is the expression. "
}], "Text",
 CellChangeTimes->{{3.712948595356977*^9, 3.712948636980832*^9}, {
   3.712948667642333*^9, 3.712948743073741*^9}, 3.712950098846405*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  RowBox[{"10", ",", "1000"}], "]"}]], "Input",
 CellChangeTimes->{{3.712950101167454*^9, 3.7129501394535723`*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.7129501309888773`*^9, 3.7129501399166517`*^9}, 
   3.713478410997817*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", "Pi", "]"}]], "Input",
 CellChangeTimes->{{3.712948446097115*^9, 3.712948473077073*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.712948473584998*^9, 3.71347841265666*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cos", "[", "Pi", "]"}]], "Input",
 CellChangeTimes->{{3.712948475626587*^9, 3.71294848035386*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.712948480856094*^9, 3.7134784154050407`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Abs", "[", 
  RowBox[{"-", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.712950733341647*^9, 3.712950735868075*^9}}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.712950736413744*^9, 3.713478416604273*^9}]
}, Open  ]],

Cell[TextData[{
 "Mathematica will usually get lazy and give you outputs in terms of \
fractions, whenever it can. The function ",
 StyleBox["N",
  FontWeight->"Bold"],
 " gives the closest numerical approximation of a given fraction or \
expression. "
}], "Text",
 CellChangeTimes->{{3.7129479775385923`*^9, 3.712948130993058*^9}, {
   3.712948369580509*^9, 3.712948378892219*^9}, {3.712948731809244*^9, 
   3.7129487332014027`*^9}, {3.715641967266877*^9, 3.715641968106917*^9}, {
   3.715718084353938*^9, 3.715718192629092*^9}, {3.715718226197369*^9, 
   3.715718227125381*^9}, {3.715718257998695*^9, 3.715718322379773*^9}, {
   3.715827301106077*^9, 3.7158273140034447`*^9}, {3.715827358034059*^9, 
   3.715827369829405*^9}, 3.7158941542629423`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"4", "/", "5"}]], "Input",
 CellChangeTimes->{{3.715718203753758*^9, 3.715718203916401*^9}}],

Cell[BoxData[
 FractionBox["4", "5"]], "Output",
 CellChangeTimes->{3.715718205328075*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"4", "/", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.71571820677004*^9, 3.7157182086928*^9}}],

Cell[BoxData["0.8`"], "Output",
 CellChangeTimes->{3.715718209216593*^9}]
}, Open  ]],

Cell[TextData[{
 "This can be very useful when you want a value as a decimal and not some \
complicated fraction because the ",
 StyleBox["N ",
  FontWeight->"Bold"],
 "function forces Mathematica to give the approximate value. "
}], "Text",
 CellChangeTimes->{{3.7157181978593073`*^9, 3.7157181982766457`*^9}, {
   3.715718239069594*^9, 3.715718240726102*^9}, {3.715718339108313*^9, 
   3.715718408176855*^9}, {3.715718465027356*^9, 3.7157185061555634`*^9}, {
   3.71571853731783*^9, 3.715718553180479*^9}, {3.715827301135544*^9, 
   3.715827314034457*^9}, {3.715827358064962*^9, 3.715827369859614*^9}, 
   3.7158941779736147`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"E", "^", 
  RowBox[{"(", 
   RowBox[{"1", "-", "999"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.7128880403396807`*^9, 3.712888041591775*^9}, {
  3.712948075384327*^9, 3.712948087249044*^9}}],

Cell[BoxData[
 FractionBox["1", 
  SuperscriptBox["\[ExponentialE]", "998"]]], "Output",
 CellChangeTimes->{3.7129480880442553`*^9, 3.7134784196890163`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"E", "^", 
   RowBox[{"(", 
    RowBox[{"1", "-", "999"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712948092084815*^9, 3.712948096506419*^9}}],

Cell[BoxData["3.75065450498591130695835115855939064274645234431`12.\
955459228903633*^-434"], "Output",
 CellChangeTimes->{3.7129480970084333`*^9, 3.7134784212329082`*^9}]
}, Open  ]],

Cell["\<\
If you want an output with n-digit precision, you can follow the expression \
in the argument with a comma and the number of digits you want. So if you \
wanted 30 digits after the decimal point, you\[CloseCurlyQuote]d do the \
following:\
\>", "Text",
 CellChangeTimes->{{3.712948134600752*^9, 3.712948280207594*^9}, 
   3.7129483487256813`*^9, 3.715718416539171*^9, {3.7158941830624123`*^9, 
   3.715894218701025*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"E", "^", 
    RowBox[{"(", 
     RowBox[{"1", "-", "999"}], ")"}]}], ",", "30"}], "]"}]], "Input",
 CellChangeTimes->{{3.712948182982326*^9, 3.7129481856784153`*^9}}],

Cell[BoxData["3.\
7506545049859113069583511585593906443587267259970073877398418778364`30.*^-\
434"], "Output",
 CellChangeTimes->{3.712948186241107*^9, 3.713478423286509*^9}]
}, Open  ]],

Cell["\<\
To define your own mathematical functions, you need to write out the name of \
your function (upper or lower case), and then have the variable followed by \
an underscore as an argument enclosed in brackets. Then use the colon and \
equal sign to tell Mathematica that you are defining a function. \
\>", "Text",
 CellChangeTimes->{{3.712950549286687*^9, 3.712950554213449*^9}, {
  3.712950739924385*^9, 3.712950873472064*^9}, {3.7129509195823393`*^9, 
  3.712950960201785*^9}, {3.7156419951479807`*^9, 3.715642009739835*^9}, {
  3.715642067858692*^9, 3.715642086970324*^9}, {3.715827301165485*^9, 
  3.7158273140655622`*^9}, {3.715827358095819*^9, 3.7158273698905077`*^9}, {
  3.7158942275420027`*^9, 3.715894276247773*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.712950967921114*^9, 3.712950975186679*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.712951183484877*^9, 3.712951183774373*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.712951184211134*^9, 3.713478427904297*^9, 
  3.713662656942017*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "Pi", "]"}]], "Input",
 CellChangeTimes->{{3.712951192597724*^9, 3.712951194053383*^9}}],

Cell[BoxData[
 SuperscriptBox["\[Pi]", "2"]], "Output",
 CellChangeTimes->{3.712951194536865*^9, 3.713478429191058*^9, 
  3.713662658401868*^9}]
}, Open  ]],

Cell["\<\
And you can clear the function by clearing the name of the function. When a \
function is not defined, the name of the function will appear as blue. Once \
it is defined, the name will appear as black. You can see for yourself by \
evaluating the bottom cell if you defined the function before. \
\>", "Text",
 CellChangeTimes->{{3.7129512123419456`*^9, 3.712951224172908*^9}, 
   3.7136627244028797`*^9, {3.713662885236013*^9, 3.713662959157125*^9}, {
   3.715642129010995*^9, 3.715642163540779*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellChangeTimes->{{3.712951225285283*^9, 3.712951226766975*^9}, {
  3.7136630141232643`*^9, 3.71366301916673*^9}}],

Cell["\<\
Defining functions with multiple variables can be done in a similar way. Just \
add your variables, making sure they are separated by commas, and don\
\[CloseCurlyQuote]t forget to add the underscore when defining the function. \
\
\>", "Text",
 CellChangeTimes->{{3.713662665777515*^9, 3.71366270873034*^9}, {
   3.713662739954104*^9, 3.713662754474745*^9}, {3.713662811915481*^9, 
   3.713662866940023*^9}, {3.713662988319236*^9, 3.713662988965563*^9}, 
   3.7158943676582317`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"x", "*", 
   RowBox[{"y", "^", "2"}]}]}]], "Input",
 CellChangeTimes->{{3.713662760384618*^9, 3.713662780099964*^9}, {
  3.713663004363544*^9, 3.7136630044385223`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"x", ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.713662783841729*^9, 3.713662787372115*^9}, {
  3.713663006932446*^9, 3.7136630070307207`*^9}}],

Cell[BoxData[
 RowBox[{"x", " ", 
  SuperscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{3.713662787938438*^9, 3.7156421788538017`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.713662791843025*^9, 3.713662793948017*^9}, {
  3.713663009163316*^9, 3.71366300923074*^9}}],

Cell[BoxData["18"], "Output",
 CellChangeTimes->{3.713662794409896*^9, 3.715642180418231*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"Pi", ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.713662798725234*^9, 3.713662801708115*^9}, {
  3.713663010859282*^9, 3.7136630109267597`*^9}}],

Cell[BoxData[
 RowBox[{"\[Pi]", " ", 
  SuperscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{3.713662802130232*^9, 3.715642181921116*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6) Graphing", "Subsection",
 CellChangeTimes->{{3.712862136461006*^9, 3.71286213680646*^9}, {
  3.712862210044338*^9, 3.712862211124221*^9}, {3.715893343606745*^9, 
  3.715893343974762*^9}, {3.715894638009007*^9, 3.715894639016966*^9}, {
  3.7158965207196302`*^9, 3.715896520838579*^9}}],

Cell[CellGroupData[{

Cell["6.1) Single Variable Functions", "Subsubsection",
 CellChangeTimes->{{3.7158946446731586`*^9, 3.715894663312985*^9}, {
  3.7158965221521807`*^9, 3.715896522214102*^9}}],

Cell[TextData[{
 "For this class, it will be very useful to know how to make plots of various \
things. Mathematica can make a plot of various functions by just using the ",
 StyleBox["Plot ",
  FontWeight->"Bold"],
 "function. When plotting, you need to specify the function you want to plot \
and a minimum and maximum value for Mathemtica to display along the \
horizontal axis. Mathematica, by convention, will consider the input variable \
of your function to be the horizontal axis and the output variable to be the \
vertical axis, just like in all of your math classes. "
}], "Text",
 CellChangeTimes->{{3.712862232172781*^9, 3.7128623336046352`*^9}, {
   3.7128624310916233`*^9, 3.712862505850428*^9}, {3.715642205974881*^9, 
   3.715642233447167*^9}, {3.7156422943052473`*^9, 3.7156425503158712`*^9}, 
   3.715705104505673*^9, {3.715827301196185*^9, 3.715827314096365*^9}, {
   3.715827358127555*^9, 3.7158273699506903`*^9}, {3.715894408386386*^9, 
   3.7158945480299473`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712862507931349*^9, 3.712862519837035*^9}, {
  3.715642248378789*^9, 3.715642274923976*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
57aK
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998593152271, 0.9999998782428621}}, {{
     0, 6.283185307179586}, {-0.9999998593152271, 0.9999998782428621}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.712862512500524*^9, 3.7128625203747063`*^9}, 
   3.7134784352387953`*^9, 3.7156422560714207`*^9, 3.715642291727566*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"E", "^", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712862526511737*^9, 3.7128625447557096`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVj38403kcwMfG95LCbqtH6wztUsKWr6fTxX3eUkS4/LhUJyQyKW6e63po
UWLS1UU0IVwJO0IdRVp9/SoqlNBWQ2SSodEsCe26P17P64/XXy+zkGifMG0S
ieT5lf8dEG/VrdEoCbdHkTt3/ilBom4vQ5VaSQwdMosWX5AgtSXP4+2Yksjt
MJCxciToL8mt5jaJktiz8VTlvEiCCA66lV2pJLwF24JaH0qQ+ZC3EA9SEiMV
1gnPtKXonevRXeH33xNOoXkqEV+Kfjdq7O3gTxAMsYtB0dGXSJNTLjnVpCAa
Zeu2yutkqGs7bhNl/44wWEdaZKrbj/zup1NN6oaJ3iTmbv6PA8jNwmW0SmeI
MI6iBo2IBlFKTSYjIWGA0I9NKZhhDCEeP+ZEsEBGmLGaH59/Jkc2Sw4Pe1q8
IIhjxxCt8C2KH8/VKmZ1Elf1DiQtxL1DEbwJSmZkC0ETygccihVoznO5IuRc
HTEeVzAxIh1H7BXh8jUlOQSdU/tZYK1EF1dwHzv2lCOQCnQb1JMowndXRoWg
AQXKXsUt3v0BBT+8rzjyWxty3HJuB21OhXyM9yVnZHQhcmcM89odNRo4YRN4
8oIUbfouq97q+Aw6PfezT+FCH7ryA5jGpM2ijox8V2vBIApWfYjNKp1DoTih
uuosR/YvucyWVV+QlxFG9Z1+ixqVXI1DKAnet1R3t/8xivo7qU3COi1gnNYv
CmGPo3SOrzDMkwwa08fGjXfeoxNgnXpzmAIMvj+pIncSHbzX6lEt1AX+eP7n
FPUUcr+SGGeT+Q3Yuxm7utqrUNI6O61Fl/Tgbik351vhNBK5z3IWPupDeNmT
1ccn1GgiMd4iNsEAoi7t02mznkGyjpCq65gROJxpU1ikfkI6Tue/F6RSIYx7
0DyifRaZX5ytPWpIg5phRobr4jmkvwHNTlfQ4Vn4VT08dB5NBrBTrgmXw5YX
v3aTixdQ8GRN9MYkY4h3U1wb1NagPDY686mVAWe6e/b7sEjQeXitbyvdBBS+
9enazSTYw1tvauVsCuW/0J038rQgCOecz/7XDPLbT+W9oWpD0qibsnb1KvjQ
EnCM2qgN6lCuY1ovC2TphNowigx7+ZzTvBurYapzk3HiUgpcenWkoSV1DURm
mtfHiinwiPEgo/q2JVDbzQ3lgToQ4DdPMxuzAq+e6/Mrv+iAmJJAKXFiw0TQ
lUO9pbowUGDPU5LWQ11wZfJSDwymDnT1hYbZwu2nh7b3e2FAc/cw7Yu0hZs/
WRpVeGOgbnL+xz/GFkQriy57+mMgxt+k+ybYglCaU3U2BIO7nTu7D2TbAm+H
YFAvFoMxkD2fa7eFNbDXESvG4GEZO3LYHgdW5QqyRIRBWfSIgQjhwDSRthaX
YeD+1IV+2AWHZfM+fi43MXg96rf1iy8OlNptkcliDEyaLH0co3EYYNtlk7sw
4LOzZDbFOPTmTwV29WBw1uGBcnk5DpIllaxCKQYfA5gx5GocOsbW3tjcj8GT
sKbmwQYcxCXMlpOjGGzwa7tztw+H2mV9Z73HMbhXsMe/Vo5DVXKOj5kSA7sp
VUTNGA6l++n99dMYWL4WT4lncSh6/rwwbQaD/lcl3CaSHfztlBYR/Plrz6Xt
asPs4PINTzZn4evvhcF6yVI7yGIuVms0GOQlThQO0+3gP3vEUCU=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-1, 3}, {0., 20.085535283552066`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7128625394624166`*^9, 3.7128625451013813`*^9}, 
   3.7134784416471357`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.2) Example", "Subsubsection",
 CellChangeTimes->{{3.715894693586277*^9, 3.715894700410461*^9}, {
  3.7158965246641903`*^9, 3.715896524718833*^9}}],

Cell["\<\
We can also plot functions that we have defined. Take for example, the ideal \
gas law! By defining the pressure as a function of the temperature (holding \
the volume constant), we can take any set of temperatures at various \
conditions and see how the pressure of the gas changes. \
\>", "Text",
 CellChangeTimes->{{3.71286258594171*^9, 3.7128626897956448`*^9}, {
   3.71286273895576*^9, 3.712862743867715*^9}, {3.712862780887231*^9, 
   3.712862807007263*^9}, {3.712951370201995*^9, 3.7129513836643763`*^9}, {
   3.715894570360462*^9, 3.71589461851409*^9}, 3.7158947031227207`*^9}],

Cell[TextData[{
 "For example, let\[CloseCurlyQuote]s define 3 containers that have the same \
ideal gas. To make it simple, we\[CloseCurlyQuote]ll define containers a, b, \
and c where:\ncontainer a is 10 liters and has 1 mole of gas; container b is \
4 liters and has 4 moles of gas; container c is 1 liter and has 1 mole of \
gas. Since the ideal gas law can be written as",
 StyleBox[" P(T) = ",
  FontSize->16],
 Cell[BoxData[
  FormBox[
   FractionBox["nRT", "V"], TraditionalForm]],
  FontSize->16],
 ", we can make our plots of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["P", "a"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["P", "b"], TraditionalForm]]],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["P", "c"], TraditionalForm]]],
 " by defining the moles of each container as ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "a"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "b"], TraditionalForm]]],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "c"], TraditionalForm]]],
 " and the volumes as ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["V", "a"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["V", "b"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["V", "c"], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{{3.71286281675991*^9, 3.712863039220662*^9}, {
  3.712863073421226*^9, 3.712863084069075*^9}, {3.7129522623279343`*^9, 
  3.712952290496565*^9}, {3.712979391817787*^9, 3.712979405016066*^9}, {
  3.712980172900337*^9, 3.712980180704192*^9}, {3.715642582996265*^9, 
  3.715642674682053*^9}, {3.715894672498177*^9, 3.715894680842684*^9}, {
  3.7158947327316303`*^9, 3.715894762452606*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"na", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nb", "=", "4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nc", "=", "8"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"va", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"vb", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"vc", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "=", "0.082056"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pa", "[", "t_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"na", "*", "r", "*", "t"}], ")"}], "/", 
   "va"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pb", "[", "t_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"nb", "*", "r", "*", "t"}], ")"}], "/", 
   "vb"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pc", "[", "t_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"nc", "*", "r", "*", "t"}], ")"}], "/", "vc"}]}]}], "Input",
 CellChangeTimes->{{3.712951397390401*^9, 3.7129514035539627`*^9}, {
  3.712951974887754*^9, 3.7129521366734447`*^9}, {3.712952189932496*^9, 
  3.712952214346972*^9}, {3.7129792068177977`*^9, 3.712979220889423*^9}, {
  3.715642677266622*^9, 3.715642693018775*^9}, {3.7156429771992493`*^9, 
  3.715642993519188*^9}}],

Cell[TextData[{
 "\nIf you want to create plots with axes labels and plot titles, simply use \
the commands ",
 StyleBox["AxesLabel",
  FontWeight->"Bold"],
 " and ",
 StyleBox["PlotLabel",
  FontWeight->"Bold"],
 ". Both commands are used by adding a right arrow, followed by the names of \
your axes in quotes, separated by commas, inside curly brackets. The ordering \
of the names is such that the first name is for the horizontal axis and the \
second name is for the vertical axis."
}], "Text",
 CellChangeTimes->{{3.712863053434869*^9, 3.712863087047812*^9}, {
   3.713478560540242*^9, 3.7134786696929207`*^9}, {3.713478909547164*^9, 
   3.713478911898477*^9}, {3.713663233416688*^9, 3.7136632360644903`*^9}, 
   3.7156427134746647`*^9, {3.715642890078484*^9, 3.715642967214251*^9}, {
   3.715644258590732*^9, 3.7156442605267677`*^9}, {3.715705104538639*^9, 
   3.715705104570764*^9}, {3.715717086622264*^9, 3.715717086669478*^9}, {
   3.715827480188445*^9, 3.715827480643249*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pa", "[", "t", "]"}], ",", 
     RowBox[{"pb", "[", "t", "]"}], ",", 
     RowBox[{"pc", "[", "t", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Pressure\>\"", ",", "\"\<Temperature\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Ideal Gas Law\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.712952143253641*^9, 3.7129521679381657`*^9}, {
  3.7134787357993393`*^9, 3.7134787794261293`*^9}, {3.715640815281238*^9, 
  3.715640816892352*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVxX040wkcAHA74YgLIc3M+LmU5PKUirLvV7q8d6GO1FM0bynU4ulFDyl5
XzRlCaklEVviV0S0iOZlupJ6Yp5SpNAZ8jK3uLs/Ps/H9GCUd/BPSkpKnv/5
/4K4g6o2QenM97scm1Waaczr/qP2voxDsC1RVzrPmmO+80xjMxinoFGu6t3M
0oATznt+UWGkwtn1FE4Jiwrbn+G+GZNc+OAVZ3mNZQmCc+vPy0xKIevDFjmX
ZQ/9gUKDbyaP4ItFfkAmyw1ivQ4HjJi0wuV298sclj+oy/Naj1j3wIVuRkhZ
/GE41hifMcr+BHO/WXHZEdFgXZT9khR+BfE+1e1J8tMwuCOM9n6TDF5xx+6+
Vk8AHjXJ+GbAJHwzPhy72T8R7Ng195Q7pmHJzKC8dDwZmt7m7YyymAOFsuij
z8l0sMmYZxq6/gDexlV6Po0Xwfmz/fu1vkqYJxXLy1ddgqE1D3//PkrBxopn
Wr1dXIhVpK57fFoZO+myN8Uxl0FN58uhXZYq2LfO6MS0fQ6oSFScF9er4jYp
p07Wz4N/OgVHuMd+RsFqpbeR5bkw6CtcTqdroEKPfyctMg8cUyIjxILFyL+U
TvPSLYAr8zXqTge00ONBdFjeu+uwl9bkIZ38BVc89LZycbwBmqLVo2a7tdFi
cDgz0eImBNvyp/ZY6aBRP7UzU50PJ+JOejOmdLCuOHL/USkfLgxnd3V26mIf
bO3RfXoLPCyXlGheW4p3+XYlaTlFwBFsEHkE6mH4K/HOl6G3oc3nliLaTh/L
u98OvHMrBpEkKsNK2QCv8jXaq+l3oDI8ATv6DFDNqT7fd1EJ0N1hUyS5DMMq
1FxbBkvAaWHf+cIzhhgzFOOsUVMKQW+eTNTsXo6LJlg22vl3gZlw7kEgg4oO
LTERI0fLgBs1Xqc5RMXwUJPEK47l8PHs7c+FDUZoKHVJopgLYCT4UVBjMg3Z
1JyerTMCkEXoqkkCjdHTikXdLhWC0LVdEbKGjt1qu8rplffgc9jaDcpTdLTw
i9T85FgB1LKe7GSJCf6aw67hVVXA+QA2X+LOwJmaFK1q4/swo1jOcX/EwPTm
/X7VWfdhZR0vt83cFK/WnNUupFSCLav5D51UU4zNIo+Nh1eCKF/fsGPKFOne
JWLzvkpYKdJP27HXDK/OCsSNzlXgqTJq/KrBDNMuLNi6VFSBrHegqdWSQAeF
dq7QlISofM7S1EwCW3zX345PJ6GDYj7mdonAlMRowo9DgmVobZtmNoFu98mb
azNJGLAZSsjKIbBDw/Z6P5cEv+co4xUQ+LLelud0jYStE5MdxWUE9hEbU9VK
STBw8U969pzAqTG7iMwWEo4LZIFJrQRW006PhIpJ+Es32cGlncCTrrWHsI2E
9L6q7+2dBCr49iHjEhKUjmuxuroJpPy5+YBPNwnDBSL4+IlArcdbvJYNkOCs
7GtUNEjgiy9nXowNklAU9m06eIjALP16T/EQCQfWUYVfhwnUi3JwOzVCwmvx
cdr4OIFUM6ZT7wQJNtYas5WTBPbuiHta9Z2Ei9k3uqKnCMyPbYCMaRJc90vS
ZmcJZHQztzjMkVDcxAqpnSOwnxJfq68gYdGqOcczCgJvWT/Z9PcPEgIvZhkz
5wkM2rvwsGWBhIbJFfKFBQJXpIBtIeUB/AtoEEWD
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVxXk01AkcAHCzwhKFkAZj+NmUZPNKRcz3K23uNtSSekXjSqEmXoceFckZ
URTKNkmKsSU5o2kcjWOm8Jt6MV4pk0JrkGPsxO7+8Xkfk8NR3sE/KSgoeP7n
/2/FHVa2DkpjvN/j2KrUas+47T9m50s/AjsStcULTCq880xl0elngCdT9m5l
WsAp533LlOgpcH4TJaOUaQc7W/DArPFN+OAVZ5HPdAPOxU0JUuMHkPXBXpbN
9IfBwAq9b8Z18MW8MCCTGQ6xXkcDRo3b4Vqn+7UM5llQlRW0H7Pqg0siekhZ
fBqc4MWnj7E+wfyvltmsiGtgVZzTXVXxFfgHlHcmyfJBsivM8P1WKfRkjz8k
Ve9AHjXJ6E7AFHwzOhq7zb8YbFm1fyl2zcDyWYnswcR9aH5bsDvKfB7kityP
PqfLwDp9gaHv+gPytqzV8eFVgPNnu/cbfBWwQMyXla99DMPrq3/7PkZB3qMW
jf7eSoiVp2x8dlYRhTTpm5KYKlDR+nJkj4USDmw0ODVjVw1KAiXnpY3KuEOc
0SAdrIF/hJxj2Sd+Rs46hbeR5XUg8a1YRaOpoVyHfT81sgEckyMj+JylyL6a
Zuil3QjXF2pVnQ5poMfT6LCCd02w37DZQzy1DFdXe1u6OHJBnbtuzHSvJppL
RjITzV9AsA17ep+lFhoMUoWZqjw4FXfamz6thQ0lkQePi3lwaSSnVyjUxgHY
3qf9ohk8LJaXquevwIds29LU3BbI4GzmegTqYHgPf3d3aCt0+NyVR9vqYrno
7dA7tzbgCqLSLRX18AZbrbOG9hIqwy9g14Aeqjg1Fvou4QPNHbZGVq3EsEcq
rm0SPjgtHkgoOqePMcMxzmq17RD05vlk7d5VuGSSaa1Z2AGMCxefBtKp6NAW
EzF6vBOyoyYa1IepGB5qnHjdsQs+nr/3uajJAPXFLkkUMwGMBtcF8S4bIoua
27d9VgDSCG0VQaAReloyqTvFQqhw7ZSHrKehSGVPOa3yFXwO27BZcZqG5n6R
6p8cXwO1rC/nssAYf8ll1eY9eQ0JASy2wJ2Os7XJGjVG3TArX5XhXkfHtNaD
fjVZ3bCmIe9mh5kJ3qg9r1lE6QEbZuvvWikmGJtVdWIivAe4hbr6XdMmSPMu
5ZsN9MAarm7qrv2meGOOw+c594Kn0phRT5Mppl5atHF51AvS/qHmdgsCHeSa
NytMSIgqzFiRkklgm++me/FpJHRRzMbdrhKYnBhN+GWQYBFa36GeQ6Db46o7
GzJJGLIevpCVS2CXms3twWwS/F6iNO8Wgd2NNnlO+SRsn5zqKikjcIDYkqLy
gAQ9F/+klpcETo/bRmS2kXCSIw1MaiewxvDsaCifhNfalx1cOgk87Vp/BDtI
SBt48r1TSKCcbRcyISBB4aQGs1dEIOWPbYd8RCSM3OLCx08Eajyz91o5RIKz
oq9BsYTAV1/OvRqXkFAc9m0meJjALN1GT/4wCYc2Uiu+jhCoE+XgdmaUBJJ/
0nBigkCqKcOpf5IEayu1ucopAvt3xb148p2EKzl/9kZPE1gY2wTpMyS4HhSk
zs0RSBcx7B3mSShpZobUzxM4SImv15WTsGTtvOM5OYF3rZ5v/fsHCYFXsowY
CwQG7V+sblskoWlqtWxxkcDVyWBTRBHBv6sPTiQ=
     "]]}, 
   {RGBColor[0.560181, 0.691569, 0.194885], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVxX040wkcAHA74YhCSMOMn0tJLk+pKPt+pct7F+pIPUXzlkKJpxc9VCTG
IoqKci05Fa4XZRFpXpqXrZCE7Ri/pdAZ8nqLu/vj83xMDkV6Bf2goKDg8Z//
vxV3SNk6MJXRu9uhXqnenXHbb8TOh34Ytidqi+aZFtDlwYqi008Db1bZq55p
Byed9i5RoqfAuQ0UdhHTFXbU4f5p4xvQ5xlncZPpByUXNiTIjO9DRt/W2Uxm
GEgCSvW+Gr+Az+Z5/unMMxDrecR/2LgRrja7XWUzWaA6m9t41KobLnbQgx/G
58JxXnzaSNQAzP1smRkVXgBWBVmtZaVfgL9feUfS7AOQ7gw17N0sg7bM0Qfv
VR9DDjXJ6I7/BHw1OhK7xa8MbKO4fyq2TMHSaens/bFyqO3M3RVpPgdyxZp+
71OVYJ02z9B3+Q45m1brePOqwemTXe86HwXMFfFni1e/hsG1z3/5NkJB3qM6
jZ52HsTKU9a/PKOIQprsQ2FMHahofT6820IJxesNTk7ZNYCSQMlpcZUybhex
K2WSN/CPsORo5vEfsWSNQmdEcSNIfUpX0GhqKNfh/MGKaAaH5Ihwfsli5FxJ
NfTUFsC1ea6q40ENdH8WHZrbJYR9hrXuookluPK5l6WzwztQr1kzYrpHE82l
Q+mJ5q0QZMOZ3GuphQYSqjBdtQ1Oxp3yok9qYWVhxIFjoja4OJTVLhRqoxi2
dWu/bgd3i6VF6jeX4QOObREr+z2wSzbWuAfoYFgbf1drSAc0ed+VR9vqYnFH
J9nl+gFqBJFplop6eJ2j1lxO64QnYeexRayHKo5VeT6LPgLNDTZHlC3H0Ecq
Lg3Sj+C4sD8h/6w+xgzGOKlxuyDww6tx7p4VuGicaa2Z1w2M8xeeBdCpaN8Q
Ez58rAcyI8cq1QepGBZinHjNQQT95+59yq82QH2RcxLFTAzDQS8CeZcMMYqa
3b1tWgyycG0VQYARelgyqTtEf0GpS7M8eC0NO1R2F9Oe9MKn0HUbFSdpaO4b
oT7g0AfUh91ZlwTG+FN2FDfnaR8k+EdxBG50nOYma5QbSWBavoLt9oKOqfUH
fMszJLCqMudGk5kJXuee08yn9IMNs/5XrRQTjM0oOz4W1g81ebr6LZMmSPMq
4puJ+2FVjS5r5z5TvD5Twuc5DYCH0ohRW7Upsi4u2Dg/GgBZD1nbaEGgvVzz
RqkJCZF57GUp6QQ2+Gy4F59KQgvFbNT1CoHJidGEL5sEi5CKJvUsAl0fl91Z
l04CaT14PiObwBY1m9uSTBJ836As5xaBrVU2OY43Sdg2PtFS+JBAMbEpReU+
CXrOfkl1bwicHLUNT28g4USJLCCpkcBywzPDIXwS3mlfsnduJvCUS8VhbCIh
Vfz0W7OQQDnHLnhMQILCCQ1meweBlN+2HPTuIGHoVg30DxCo8XKr53KSBCdF
H4MCKYFvP599OyoloSD061TQIIEZulUe/EESDq6nln4ZIlAn0t719DAJ7/kn
DMfGCKSaMhx7xkmwtlKbeTJBYM/OuNdPv5FwOev39uhJAvNiqyFtigSXAwLW
zAyB9A7GVvs5EgprmcEVcwRKKPEVunISFq2eczgrJ/Cu1avNf38nIeByhhFj
nsDAfQvPGxZIqJ5YObuwQODKZLDJp0jhXyNjUvQ=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Pressure\"", TraditionalForm], 
    FormBox["\"Temperature\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->FormBox["\"Ideal Gas Law\"", TraditionalForm],
  PlotRange->{{0, 10}, {0., 0.6564479866031021}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.713478781417905*^9, 3.715642997447731*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.3) Multi-Variable Functions", "Subsubsection",
 CellChangeTimes->{{3.715894823671874*^9, 3.715894829415977*^9}, {
  3.7158965270161743`*^9, 3.715896527078782*^9}}],

Cell[TextData[{
 "If you want to graph functions of 2 variables, you use the ",
 StyleBox["Plot3D ",
  FontWeight->"Bold"],
 "function in a very similar way that you used the ",
 StyleBox["Plot ",
  FontWeight->"Bold"],
 "function. Once the graph is made, you can click and drag the graph to move \
it around and get a better angle of the surface."
}], "Text",
 CellChangeTimes->{{3.715827639368902*^9, 3.71582771910305*^9}, {
  3.7158279085989523`*^9, 3.715827964785322*^9}, {3.7158281104422817`*^9, 
  3.7158281348186626`*^9}, {3.71589484335253*^9, 3.715894867824996*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x", ",", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7158277744798822`*^9, 3.7158278483982677`*^9}, {
  3.715828094934022*^9, 3.715828103298918*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
jVZ+Cv19SfW/rLgL+rtC9Y/SPT79/avq/0j7U/pL/SNVP/19MOHtyxry3OnX
sWq/Uusm/arWPdVQ+bH06460nuLGqod+LdF93yjXL36WKI4i9N92Fs+b3332
6vs7Wr/mqf6KtXPWd2zby/pF/aWuX6tSHoovEs/068tkvteLjr71tLJp+yqs
X8er/ToaX/o1K9WHCH0I/d7aejcjq59fq/4RX11ct9N9na1f/Mwo3oZ+Xan6
0/1dH+eX1o7aOf2sm+pzcVWwXnRQHsB+8TPK+vvrdJ5GUzVP6W+DdF5HzGv6
i1ysO/T3LsXtL3T26r3UzkRrZWfgQfYhSv2N463/jdTu84n8/YwHfm6T3Qv3
QU2iu5292qJ2/yW7Cg8dFG8wU3YYe5Wusw0srgx+SlM7Hx0tOw8/36TrQsS6
YPvNdB2JWEfgB3n9epf6gZlon9Yp+KHd9Fw3Mn5otzTRn8HZfaLaHap1k/b4
WerWu3+o3drSZ/hJ9bmF9K3c+NH6G52kdR9++qd+QjRVfgL8pOPeLsKvgB/5
Ufb+g/O7Iu936e+ULz/C/C75RRHrAn6X/Ch7FwW/a6nOE05y5x7yc6Ll8tPg
WX6R3k8YbjwjP+eo8NtR8s90fhc/a8vPhGfkPzdcHyPkx4+FZ/m9UUP5vfAs
P9nef4Bn+fkuD8X2BZHfF8hvj4jfgGfkZV2DZ+0Los0desyZuHGE928j798i
/x9kT+AZ+WPtO+AZ+dmnwHMDyV/l9hFPSX7OGZCbn420b4Jn5B+ofRY815/U
rO2CR7tG3U/8qt7WJVONZ+KA7tB+DZ6fTPd30XTt79w+NLrY7UNL0/1j9L72
j/DTQO1uqt/5vrlzKo2f99RuyQ/x+MoPK40f2iVfye1Do+luH6p9azRR+2V4
Ib6G/bXjIYYH9IF96xDJA95R++XRsp/oyTeqb3Sy3y83PXmFuA6d27j+xvSX
8aoneY6UPODfqv5vdG6APPjto2Qnwa/VfmGW9gvIiT8/XfYWvLP2Hd2073D2
JPb25HTVM0P1UH6d7it76Xyb/n4nOcucnI3lV6/WOgjeXf78tfLnkfMc+dtr
tZ6CT9e+YL32BcgTS54j3Hn7+arnDdVD+ed0nzhc73Ehf0vJuVZyoj8/pH5O
3FN+FPNivfzqLvJbwDfK/xwjP435cpX87b7yf8Dby2+/TX47+EL5q+PkB9p+
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
1sLP1z0dvyMvuLP/8ezRzV4pWVsR/TdqL/Rb
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFm3f8V9Mfxz/3c8+9R5SQMrIqWUkkIxlJk0hGktVWkZSElEpLKhkloYhs
lZWZSvbeKzMre88f8ns9vc7v8fvjfM/rc77nnnvuuee85+s26D3kiNOqlUol
L1RUXxcqlQ1V/6HGAWqYKXyH8EDhWcJ3Cm+qvtOE56g+We2XCS9W+9HCI4Xn
CvcXvlR4kfBg4SuFlwifJnyV8L3C/bJKZXuVufq9he67o/Av+n8/lUvUtlB9
XtI9Vur3NbFSmaj/T1CJKm+XlcpJ6vOzruutcr7adlL9vtq7qf1r4Q+FjxH+
RvgtjdND+HvhOSr1NfYFqn9QnxPU/qPwkSprhR/V/Z5V/57Cv6itv8beQWWe
fk9RPUylhkpz/W891S+r/2qN01///1Nt3fT7XOF5usdm+t1Yfb5RW2/VjVQu
0v9q6ffmqjuqzzO6V1fhz9X3OeEjhL8Qrqk+mwm3V59r9buZ6nmqm6jeSaWe
yvrqU199Dua38LbCRwkP0Xwe1L06qt5E7Y3VfrTaawtvIdxZeAPhLYUPEz5Q
uLvwJOE6Kr10bUOV9YX7qN5W5RyVbVQ2UWmveTRQ/amu2154c+H3hbdWXVdl
jMa6VHUdlfOENyu8H+aq3rzwnpmnupeumSp8i+7TU/hC4ZuFe+feY7cKHy88
QXiB8AnCE4VvEK4hXFe4tfAHes5+wv/RXI5ReUz3PVp1H/aO2h9Un6+FZwif
rPavCz/TDaq/L/x+b1f9Ze730199fsy9N+/XtX2FrxV+SPg4/W+k+m+n+nu1
X632+9R+Hm0qF+v3d4X39m2F14a1Gqf2z9R/kuphuvbLwms8X3VLzb8H66V6
X5XjhDdW/TvPoP7NhY8QPkPtW6t+R/XwtA/31P8OV72e6g9Vz1Spp/K57jVd
1+6t/utofp+m9/dV4X24QPWx+t/ZvF/VtzPfzPM4PvO8mfNwjfuJ8EnMsfRz
7qS60JhPsc4qV7Ef9Pti1T/pf6fqukzjv6MyRDiqfk/9hvJcKpernJnm2VDX
bKr6Pc33U107XP1rqv9HwqcJF8KjhAcI/62+Ufd5nvkwP7WfpfaN1Ocz4TOF
1+deKueztxlD5T/qO1h1T5WPhU+kLvx8XXTfPzK/U9Z9XbUPU/sB6rOB8Ajk
DHJC/6ufedwTVW+hMl54vP73nPAxpefN/N9X/bTatuLccLYL76urVB+l+00R
vlHP0ULXHKs+G6muq/ZGaj9S7RsLNxQ+QnjX4Pf8ktr2CV6zd4Q/Uj0n89q1
CF7Xt9R+Xmk5PKb02rGGHwtvpLE2VPkps9xEfr6j9p2DZerzuvYT4UPVPqO0
Thgs/LbqEjmlPt1UpqnPBqpfU/93VU/PLAe31+8O6n+W+j6ka25F7ktuLxVe
iNwXbqT6QPU5XX0aCrcWHiJ8gK7/Ufg4lX3UfqLqC9W+MmMjad+r2k/3bStc
K/icc97f0Nh/CZ+MDNecD879vq5kTLW3YW7oFpXf1L5c/18jfLjwKvU/V79v
E35C/X/TWM8KH6v6V5VnhLuz99TnduEn1We08ELhp4QnCN8t/KLweOG7hF8Q
HqlxJ+oeD+t5L1P7SvaD2r9U+/M8I3tT7XcKP6/2P/T7b8ZS/waqD1A7SvlS
4UeE3xOeKvwQz1u1rvtHuC+6QfivimXEZ7pnF+ZWWP+hB18Xbp17fS7m3Qev
7dNqb5v7/c5U+zThpcJvCl8o/CDXCgeVh3WPzipDdO0fan8kt/7cXOUU/a6j
3w1Ud9XvbYT3Fx4sXF94b+EBwrlwLeFDhDPh9YQ7CFeFawp3Sv13YP3RX7rf
F5wbbAO176i6h9ofYd7C72oue6i9o/A5nJG0r4YKL1efg9jb6vOo8D3IaK1t
VF1H7fuqT5Hbztn7X+NHZ15VO+FSeCP2oPA6whsL74/NI7ydcDfhuzS3T5Bp
yCPGYm+q/ov1Em6l+s+q7amWqm8O1uMnq+Nbpfcee/BUlS801iD2M2uh9r30
Z43a7kG38luDHKz6XLXvKdxJeKRwE+FWwqcK75z7zI4Sbip8mPBo4V1y74fz
hJvlvu+YtFbYG2OFo+79nfBdamuR216awDvXXNsJr1V9ptoXCK9Q++6599V4
4f01xx+Ej1JZB12oegl2jcpePK/6nCF8nfAy1ha9K3w7dofKTpwFtW8l3ET4
+Krlw27CvYS3Ft5Z+AThYcLzhR8W3la4uXBv4X3QZ8J7qOyQ9tvAqnXBq/p9
kl5SS/X5Uu0tVHZChqo+RX12FG4pPEj4XM3tZ/ST6l9Veqm9qerTk715un43
05jthHPVC5L+Re/uXPoMvqy1ukm/R6h0Vdkv9xmdzrqpT0e1FaqjSjWz7CpL
y7fXhOervlalg8oBue3JGbr2Uf0+IrNtum3p/wfVjxde/8dU3537XAzHRhT+
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
          "]], 
         Polygon3DBox[CompressedData["
1:eJwtm3ccl9MXx595vzJ+MpJQKckuyggZkVW0S6UhpCJ7lEIDZZQyU0hJaSgh
SpSWkb1SZMvODNl+n3ef+8d9fe+59z73+zz3ufecz/mc89Q544J252dJkjyf
J0mh3w5lkqzS7x2SB1eSpLXk1ySPlXyF5DaSX5d8i+RBkjtKfkfynZKvlHxA
SJKb0iS5X6VQvZP6V6t/nPqvUv9hkmdJHiz5YMkr9Kd7Sd5F8jaSW6hcqBtq
prZ31ddN4z9Q/W71D1Pf4ZIfknyl5EMknyp5jeS7JF8tuZPKctX/VVup/99f
9Ys03zGS39N8LdU/QPIJkj+S3FbytZJPlfyxxt+o8askPyW5heY+Vf3Pqi3R
8wT176W2ByWeo7az1Lev2q5R37sqb6rvB7XXV/1qlYc0T2O1PaDxl6n9oPj8
CyUPktxf8jGSH5N8reTDJH+o3510bTeVybp+P/Xfrf7z1d5I/d/pd3f1rVOZ
xTqp/1H1X6P2Q9V/sspAtZ/I8+j5flP/fhr7h/qHqG+VfreVfKrKfRp3k8bU
1O8A1pjrNP4F1a/XuEs1/gTJz0seKfkSycdLfk7yCMkXSz5J8krJN0i+TPLP
Wo8+7A/N1VXyDZp/Z9XPVdsxrJnqB6n+rcoMya00Zoja2kheo2tPkzxG1+yq
thuD73md6i8mfhbm20Vyofu/XvVWantVfWM010CNvUnyYMn3akwtyaeoXK16
a7V9ofFHq3+J6sM0/kL1Xa7/2F79n2m+01UfoFJN8p+Sz1f9FI1/ReNv1vgB
rK/klyWPlny55Js1Z22Nr6rxo1Q/Sv3PqH+o+i9Q/xGSF0m+WvJ5kptLflby
dexLyUdKXix5iOTzOW8qQzVfW7W9WHrPf535GTkLbSRfI7mT5A91f43UNkX1
S3X9geqrLXm85J6Sz+Q8Sr5f8iWSG0veU2W2rr9FbZ+rb2/JD0u+TfJO7CWN
+0H1+XqeU/Q8HdR/o/p7qG2D5MfV/6PqC9TfSvIe6p+p/lFq+1L3s5/kJzLv
2Tqab67Gf896aPyeGv9n7v3YT6Wm5H01/nGNn6Axu2p8fZXbVe+rcfurr57k
WyWfLbmB5N1L32sfyQ0l76UyJ/OYL1h7tW9U/VjNv6Xm313909lLatuBvau2
fVSvpXHbqe957kFybcnbc9Yl7y25JudE8iuSG0muJ7ma5DP0jF9o7qqas6fq
T6n9V/U3U9vmGvuGyqGS91J7dY0/S/J7XKv+JhpfX20zOHecT93PW+o/XPV9
NKaG+j6RfJLkgyXvLPlTyS0kHyJ5l4rPNGf7IPSE5NP1Oy/zO+fdo8QP0H81
Ukl5Vo2Zm3lNd1b/PirTVT9X1/VW3wP6/ZL5NT7n3tX/pOQr1H6u+uvqni9G
V9AffKY5233RwcE64q3M16A7ukgem1kH/K352km+TnJnyd9L/ojn0lzdsRFq
r6lr7lJfD7WfwfPxnOrroTJF/Xuo/w7191P7AervXLGtytRf0f8fpP4n1H+5
2vqyt9EdLIPkIyXfK7mB5jlQpblKE8m36drdVL7SmAVqm6jxe0r+WXJbzbdM
8m2qH6Hr1+p3nPruUDlM17ZX20j97sQZ0v/P1++9Gr+H+n/U2PtUPpXcWHJW
2IZgS25S++HYC8kzJPeXfLbkQyTPlzxAcj/JTSQvkDxQ8jmS9+cMSb5Ich/s
rcqTqv+itkT/fybPpuo3Kg+qfTQ6XP/9t+QjJN+o6wepfo/aH9G150muK7mt
5Jz9ozJB9cvVVlV9F5e2x13UVlFfD5U3Nc//NOf/gm0muqdxbls6QeO3U9+t
Koeof4yua8HeUzlKY7qr/0P+X/XhGn978LvYER1SWsdxfhbm1n092U+qb63r
tw7W2eiew3Lr8l4V2yns1TD1/6X2zyW/JHmj5uqh8hH6X+3XaOyd6AD2mea7
vfD5wdYfmNtWgkk+zWzzwCo8Y3uNvSvzs4+UvGe0N2epfofGjNDYqWqrq/7r
wQSqb6P+Fqr/FnxvXfU/j6p/M2wI+0djulf8TB0kj8/8rJwJzsrRuc/KPegf
9VUHE6g+Dh0r+QswB3tb11+ErlHb5sFzvqhry9T/xZ5spL4bMu/VmyXvoWs3
15iFkqsG2/4rwUN6lu0lz+Z5VZqqXkUlqP6Sxk/S+HM1pqbGnqz5UvQf75v3
IfkPje0leVvJTST/LnkU2ErXT2I+bCT4Q/3d1b6Frr+stL7txv1zf/o9SWP/
U9uRYI7S+vk0tVdR/yWl9XFXyZtJ/kBrcKTGV9HvPRWvK+vLeThO15+oNgDt
UZJXa8xbwfj128z74e1g/Lpe8rWSU96Z5Kd17b3gB7Ufrfk2qO1wdIjm6AV2
YT+rvhlrlvod1Na1mcof6l+isRM5K8G2+pvM+72vxu8k+XjJ/6qvn+Sd0ZWS
/5P8jeY8nr2u3/uwF+qvxlqo/y/ON/8nuSmYRPI5kneR3ALQzlkobVtqo8+w
9ZqHrj/j+3ii8P/9L/d6Pl74frbKvZ7LJB8suYbkZuiH3PYY+w32ROc8LXly
Yl10sfoXZcYUYAvsz/Roz7DfCzVfQ9W3UftRunZw4b26me7vVbWt5P0xVvVj
1f9LsO7hTHO20YnzIh5AV96i8XXj+Rqr+nKVQ8Aquv4YjR3EO1H/rmCKwpjn
wWjvsYdPq21/1bfV+KMrPtecb/D8iWpbUxgbNlD9JPX3zv28k9S2W2l5dsQX
YJFu6DDJ50nO8YUK+xJ7aNzxFdvUx6I9xtayB1uxlnFvrpJ8Cs8m+QSwqeSt
Nb6G7udztb0MRlV/XdWPq9jHeDSzjcT3wCcCKzfM7Su9VHiv15HcvGIbOo3z
n9i2zlL/Vtxr7vO7B/pJ/zUdfKT6EvSj+qujcyu26fgDNxa29dhw3k+L3LZ9
UWH7sb3kLSU/I7ke2AobUTFGZG2a5xE7ar59wZeZsf2Cwvqkam59ME9yDclb
5rY39TX+Mt3bVJUtgnX8bqx/4f0xv/D+3zq3/vhUv7U0dmVqG7dY/bupv5ra
t6rYRnKeOdfYTnxC7CN2El9xpsZvqWFZ7vM0Q/IWbI/c53NuYX1XkVzwLgqf
zyqSA9i5sP4Lue3pdPY7tjn3eQejYA+xi2CXB4pNXclfUX8+Uvh8b4YOV/8V
aquOrlL7P8E+J/oRPYkvOk3twLx/on6YWthv/zvqhwtUcs6+2l6N+7MJ+Ebz
76DrV3Kfmu95lc7qe1PlMPXvrfYd0c+6fhtdP0TtCyQvVvteqg/T+NO4t9K2
Ax8S/MqatMu8J1gr1qRD5j3BWvFM7TO/E571TtWX6trLVY7X3LdKfjq1T4d/
OE6/z0lernKC5Nq6porqz6i0Y+8H9zNubsU+1kuZMRK+V0f2u/qfxcdVfQD4
W32vSx5YeM9ge7Ax7CV0ILYFzINuREdie7A56E7ODLaPPcdZOl9lveZqrnJE
fEf3g0ESvzv2NLYOG8deZ0+DpfZMvNfZY+hudDJ7jz2CbeAMsHfYQ2CzOon3
FnsQW4HOZm+W+q82mTEuWPfm0vZ6g0pf7JGub5X5jK0O9nHOzfyO8X3qF9aV
r/I+Ve/HnuF9qj5ZY8/U79rUa75/YZ2EbprD+5K8srSt5Yxz1nuovK2+hmD6
wjYWW4uNBYs1A5Oo7yD1za7Yp8S33FJjrizsQ+JLPqnSWvX+uuYrXfu1ypP4
ayo/827BCKofV/heTgNjaI7jNP88sBftmn9oaSx8KBhY9ZPw0VRvq/6HK77f
tySv1Zjxeraeklen5lz2QJep7AD+UemCDiw9nmd7DLyicgB2Rtf/zvMG48s7
It4bGmyvWubG21up/U/waNwvv7EnVL9WZT+Nfb80tl6BvlO9aeGxYKiqnLvM
64PPfYDmPF1ta1LzA/jT4JOJko8Dn6O7Cp/9iRGvdCmNjf/WteMr5tj6ZdYJ
cG/4uOdk9lnxfcHnX6r+n9qWsHclv5IaP58ajCnAetskxhroMLAgOhDd1j5Y
t/ST3C5YJ4Fd0KHoKvYce2+o5N25Xn0Hq1TlvOleh+s+X8nMacFtgWPBswdw
j7k5H7A4mHx8YR0IVkKHohu535c565I7B9/PC6n5mbaqn4zNA7/x/6rfBz7g
/KkcmxnPo4826SU9f+tgXYJO2Ur1G4LxOTh9kfrHBfuX+JmLK7Zz2Dv8w2Nz
czyvZ/ZR4X7AMGAZfIa7Ve+gskzyJYn13UTJO2a+p0mxH10In9le9Zb6v8WS
L0yMP7l/fKmGcfxGlTMk19LvTP13p2DbeIXaOqo+ovCz8h/4F/icyzJzAvii
2MwzMnMe2FJsfC/WP7HtP4lzkFrfnaB6c5VZkqurfJa7/9F0k5pLTiyMCfBR
GyfGCtuxhzNjMrAZ55Lz2T7x+T9Z5fHU/g5nGkwCZ4iPC1aBo+mfmTOBu9kZ
vz8zJlwer0cfbCa5pep/Y/8z2+xVqh+rMgNbonJ0sJ3F3u6gMkz1nwrzleyt
pyr2EfAV3tD1PbU+dwavHe9pYVzfF1O/0w7BmB/sj8+B7/tOaa7iUsl/oitz
+4e1MvOFq0r7yr3Vtr4wJ/my+h5JzFXCub6ZmROAi32jtG+Pz4Dv8FZp32m4
5G+ZvzS2ZU/9IXkoZ1zX/xLxd2/1r0v8jprrfqeo/7PEnAXnr7fkj1PrQPgO
OOpnM3P2cNeHFPb1r5b8rub7LngvNov6/SDJY9U/U2U71euAedhrYDZd3yBY
9+Ez4TvB2SzNzKnD5eBT41tfJ/nXYA7tisycF9za4cFcDD4rviuYZVBmzgws
U7NifgqfGt8aTm1wZg4Nrg0MBD8OZgcb7cp657ah2wRzLsszczRNov2aor42
KgcH298mUd9hn49R2zR0CzoJrJr7vHB+4A7xCfpGfcv/wamtkDwzMdcGR3Vw
1Kez4/loG/EU5w0OGy4bDudq9nJh3xqbgs9YW/0TM3PeWWkfp03ED5wvfLDW
ES/gm8EhjpTcJTG3CMc4IjM/B/d4XjD3fbHqu1XMCfPuuuXmiuEQeTfdc3OL
cK7wdafl5mLhfOGCz8jNBeMT4hv2ys31Nor7iefHv4TDXZzZn4Tb5Z1xL81y
v0s47VejPYDrPr80lgRzgj3xR1+O+A//lBjLa5ljKsRe4LxfiecJfxX/dkV8
v/iXcODwkV1zc+Nwzs9k5tThouFY4S83xYcK75HO7O24d8DAm+Ipubnd7SPf
1lFyvYo5Z95Np9xcNPEo+H18OHy5Rbn5h1bsP8lLc5+N1uj4wpznkswxJLhQ
5sS/xb/jv9gTxEpOzr1X0C/YOmxg1/gOP8ltv3m3N/EOJP+EvS/NqePPT07s
3+Jznh71Pb4oPnqPzD49vnvDwrYTjAhWfEVzvaf6CJV9C3NU6O5vJPdXfYOu
XZUaI4K3mkb7BIYGSw8rHQs6TPI/qvcqHEsjpjZc167RNR+m1ikHcn5UqoAP
4/zETF7UuIcTx1K6B+sv9Ni8irn3j9LIT6ptlNqa5MaUz2v8itJrAacEt3Rh
MJ8Ar/A4775iXhVMubA0TgYv/xzfD++L+k8qF0j+D52o69/UmL80/lKeB/yl
/ssKnyvOV11snMaug5fJHFOAv7hEpQFrEcd3K4yt/0vtv1yvsd+nvn+eg/kZ
+6/K5ao/HMwnwCvMr9j/4VpIoStUfy23f4dNGBrXk3f1LftD9b2DY5djdck6
+J/CsUZijut17U6Se6fmvOHLq/M+Jd/MO88dPyVeR0yQ2CCcN/ws8Tu48J01
/uzUnPsveYx5ZubciYXuqP4z1T8m8f/tXdi2nZWYzz5S9zc+4rFqqu8MBlLf
meq7rWJOqHP0t8ADxJiJ5y6M9gu80CX6e+BfYqYfSF4a8Sb48/3MMULsby3N
P0f1C9R+p8a+UJobhJOGm0bfE68+Op6XfYJjXe2QNfbswrHFeqnX5wOVT1Jz
MHULx5SITzeL9oKYw3cRbxCLuDU3/sCfIvZOzPudzDEFYuE/6v+6YAsL++vV
g2Mn16j/o9LrRSx5GOun+g7BsZfhkj8ozRn1jHgMLumC0r47Pju+OzH1z+L7
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
fwuGD4Iv8lrwf/ONDd/asOdm5vaJ2Iv/B89lPpU=
          "]], 
         Polygon3DBox[CompressedData["
1:eJwt13ncTlUeAPCn5/W+DGlkJMkyJEIxjS1LqsmSvY+1sTWZIrJkieyVQqL0
CYmIsTN22XfZQ/alIpkZYxgiyjTNNN/f3P74vc/5fc/v3Huf55577nmLdejR
tHs6lUp9LDLFMn+GZaRS++Fy+e/k+8RN7VzZUqnBoldWKjXHp4/UNLXTxVHJ
JfYcqyn/RJxm3xr7CTvjeDfZdfkXfLN2D/VXb0mlbvg8wH9Ql1v7SVFXzRus
rLquxtbQd4Sf4mvZOvE0O8/axDG1J7H/in+oeZ+10J5i7EB9+eXZRIY4KTKd
95TP79SOd4wJooTavGyFeMvYY/L1xjaQfyTaspnsDXa3fJRowN41thgf6lgT
WUs2VT5I3Z2ZyTXGtVbnq8UJdeN4M+0/ZE+l8mjfLiby21l7Y8upX2fcP1kl
n5VFPtecQ90HLG98f3Xl1a3VN5DdJR+uPUPfKnWTwrQ78udEHue6rr+7MbX5
GnFSzRRRTDsmQk19u9VMZgVZJ1aZbWXjWTbWhBVli9g10VX7cT4i7qeaa2KU
9luir74f43uIjtqPqNshvlLzgWtsFXNHDNZXQJ4r5ovv2Up9S3E5K/HoP6bu
uDjPprI2cRzxur6CMX/U99F+gm0XZ+K78dbRFsP03SW/wP8l/yHuBWvF/m3s
S9r12E5xVs27/EntFtmSa2oc47S3ajfzuU3flzHXRC7tp/wupRxjjHy0sY1Y
2+zJnIu5N5UXj3mv7hF1ex0jN79VnBa/dNwzPj9Xt17dhozkXsU9W85flx8w
dkX83vJa6pYZU1f/n2K+yj8Uv9bupu5hdXuiT+0zbB4bzYrJ+4l8rCm7h21U
18HYvzheJ+3nxTPyOmI1e1XdVvWfGTeXVdMexdoZ+1e1r2Ulz8847bP6/i5f
rPYl7c18lrqK8hGiMhvA6rOv1U9XW4r1Y3XYgbhmdj8bxBrGvWfz2KNsbDqZ
SzGnhjteJdaf1WNn2Sx15dlQ1oSdYDNZOTaENWbH4zlhD8TcY43YUTaCXfZ9
R7KJcXz5bFEh5g9roe40n89qsXHpZP7Hc7CJDWa72G7Rzb3fFXMh5q38hOjL
+rrmPKyxvIixa4ztz/Kz5uxetjnmMruN1WeF2CrWif0kn8lzsrkxb2PuyBvy
wmw1G8mqsIGsATvHNrqWAewIW8OqqvmGDY31l+fwvfPKF4j68knp5JmIZyOt
9hbx56xkXhf1PdZrv6x9SN0qdVX0b2D92WG2mj0U1xbfQyzMSta8Ysb2lufW
fkLd3epWOscc/RXjeWYt453BFrHmbDYbGeu9cTPFlPg92AV9F+XTxQS2lJ2P
d4B8Vjxz8Xuwi+ySfJHoo70pfkN9FeQ5RQHfvXis4+Kicy5lg2ItULdQXQ35
Et6eLWPvsyJsQfwm2jvYVX1X5MfFrlgPWeuYf/I3xWNsOPs9u+I8N+Slnfd6
rMV8rVjqHE/Ll8f8U1c4jp+ZXENcy7f6vpG3V3fO2I6O8wX7mi1mT2kvSCfP
cR/5O1nJ3I45Pl3tWPly8Wy8Q9lH+i4bew8roj9PvHuNLSHPGRHvT9ZTXJGv
EF2M3cJnG1vG2JWsK9vG5rKy7GP2AtvK5rDSbGNcI+vFHmeb5JvFUtab1WJb
Yqx4L/YPbBtrGu8EUVu7L1sZ67t8rXP0jTUpnexfKrN1rB87GHWsElvDerK9
bDErz1azF9ketiieX7YjM1lrYs1ZFfde3ivWZ+06rGDsk/wOS9jAjOSex72v
Lu8mslg19iu2RN2hWI/Zd+xL1lbNs+I/sTank/1T7KPmsufVLWHjWSn5QZ2T
2Y10sreJPU511sa9yW9MVVFN/kf+o5rq6WT/Npvv5WPjGWD7WWMdHeIdJ68q
lKRm+fMi+4W6R1l+tjzW/TgIq81yac6L90C8W+VV0v/vSs1kh+PdKvmenWbt
1ByJ9zK7yc6w9uyz2BOxa+w4a5mZrIlj4j3O/hZ7O+vBgXiPsqvyY+paqJsn
Omckz3Q82/fJe4qS0c9ecx0vGzefdVe3kn2or9zPe58CrCVrJR5zjmm8HZsV
+yR1heQPZiXzfTR70PF+Iz+bmey1KsoriEtsIett7EZ1M4z9rfyVzGQex3ye
q2+tfF/sJ2MdYEf0NWP72YR4btlR1pxNYyUzkvkc83pDPOfOdVvcm1jv4p2h
5tXM5LmI52N+PLPyT2NvEuseO6CvCZsR95jNZ2NYcfmeeP7ZBbaPNWJb2Cvs
FNsYe3U2RBRl7dgDbFfsJ1kh1pqVYdvZIFaYtWFlY82L/wdYkdjnsPtjjYr9
UVw3+5xtij1f7F1EGfZCzFV2WF3neKewuuxWNp8NY6VZF1aNHWJDWQnWgVVg
+2MPy7KzGixfrPusB8vBarI72LKYH+wO1oyViDWHDWB3ZiRzKObSFtaFpVk9
lpstiD0Nu491jueGHWQ//bzXn+xzkvg+1jl1GeoapJP7F/dxN3879kHsU9Yw
1rp417KTbAN7mM0Rndji2DuxkjEP4l0V15CR7Ntj/z6bd5Qv0n5P372xXjne
yFj72U5WNzPZgwzJSPYased4yLzfFv9LZST/g8X/YrXV7WRvsnNsV+yZY41l
w9lXbDurxbazEews28HqsP8Be1flnQ==
          "]], 
         Polygon3DBox[{{1297, 1296, 1780, 1170, 1171, 1781}, {1421, 846, 970, 
          1762, 1285, 1286}, {1528, 1020, 742, 743, 1021, 1529}, {1474, 947, 
          628, 629, 948, 1475}, {1714, 867, 698, 697, 1006, 1517}, {1719, 879,
           713, 712, 1014, 1521}, {1695, 805, 629, 628, 941, 1468}, {1419, 
          844, 1167, 1779, 1281, 1282}, {1426, 849, 978, 1765, 1292, 1293}, {
          1427, 850, 979, 1766, 1294, 1295}, {1286, 1285, 1763, 971, 972, 
          1764}, {1686, 778, 599, 598, 1157, 1658}}]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0r1LlVEcB/Bzr5apmUIILSpuIeZg+YaKWESItgg15KC2ZNpVWkInR/0L
cnBwCB1TIYVo1CFcBF9ur6biUgR2NUsn7XNs+N3P93ee85znPOc+5Y+HOgcT
IYQpNS/EPOpnj6+yQyjia5bxHau4wmam2cGzCyG0uKdLfnIxhIzcofr1z/Qn
8sO4sHkj6JGL5XG5lBOs4AxrucC7XOYfVpq/qtb1s+xT+8kQNvS/uMkM0zzg
Bx7yI0vs8an5n+QX8mncl1pTn42NGAvmDug31W/5S9y3fCR/jXvgFv/yG4+5
zRPuMGGNavPTalc/x5Tqsfc1fSeXeIdveIvTvM6XvOaMes0fk5/L+dbt1l91
fTg+V36gTuO76NvljPxI3mM7N9jE97zBtyyNWuMHF91TyEnWq/uecSWuxQK2
8TLvMT+eP/OYZZ0683PllPxTrlW3Xb9k7Ltco1r1OfHd5BbZa4Tm5PlfHhoZ
j7mBWaxLnh95SBq8mfj/3f0Dga5QTw==
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1187, 1462, 761, 1186, 1784, 1377, 1188, 1785, 1378, 1189, 
       1786, 1379, 1190, 1787, 1380, 1191, 1749, 1788, 1381, 1604, 1750, 1789,
        1657, 1668, 1382, 1605, 1966, 1463, 1659, 1669, 766, 1635, 1464, 1684,
        1984, 1383, 1192, 1790, 1384, 1193, 1791, 1385, 1194, 1792, 1386, 
       1195, 1793, 1387, 1196, 1751, 1794, 1388, 1465}], 
      Line3DBox[{1198, 1685, 1854, 1197, 773, 1199, 1795, 1389, 1200, 1796, 
       1390, 1201, 1797, 1391, 1202, 1798, 1392, 1203, 1977, 1656, 1393, 1673,
        1981, 1658, 1686, 1978, 1678, 1677, 1687, 1982, 1204, 1799, 1394, 
       1205, 1800, 1395, 1206, 1801, 1396, 1207, 1802, 1397, 1208, 1803, 1398,
        1209}], 
      Line3DBox[{1211, 1688, 1855, 1210, 1689, 1856, 1212, 787, 1213, 1804, 
       1399, 1214, 1805, 1400, 1215, 1806, 1401, 1216, 1807, 1402, 1217, 1808,
        1690, 1857, 1218, 1691, 1858, 1219, 795, 1220, 1809, 1403, 1221, 1810,
        1404, 1222, 1811, 1405, 1223, 1812, 1406, 1224}], 
      Line3DBox[{1226, 1692, 1859, 1225, 1693, 1860, 1227, 1694, 1861, 1228, 
       803, 1229, 1813, 1407, 1230, 1925, 1466, 1408, 1532, 1946, 1467, 1409, 
       1533, 1947, 1468, 1695, 1926, 1534, 1469, 1696, 1927, 1231, 1697, 1862,
        1232, 1814, 1410, 1233, 1815, 1411, 1234, 1816, 1412, 1235, 1817, 
       1413, 1236}], 
      Line3DBox[{1238, 1698, 1863, 1237, 1699, 1864, 1239, 1700, 1865, 1240, 
       1701, 1866, 1241, 816, 1242, 1928, 1470, 1471, 1243, 1929, 1472, 1473, 
       1244, 1930, 1474, 1475, 1948, 1245, 1476, 1477, 1931, 1246, 1702, 1867,
        1247, 1703, 1868, 1248, 1818, 1414, 1249, 1819, 1415, 1250, 1820, 
       1416, 1251}], 
      Line3DBox[{1264, 1496, 1495, 1933, 1263, 1417, 1821, 1262, 1874, 1705, 
       1261, 1760, 1873, 1493, 1260, 1758, 1872, 1491, 1259, 1122, 1490, 1580,
        1489, 1258, 1951, 1488, 1606, 1487, 1607, 1967, 1609, 1608, 1647, 
       1486, 1651, 1485, 1650, 1974, 1257, 1484, 1579, 958, 1627, 1256, 1482, 
       1871, 1754, 1255, 1752, 1870, 1480, 1254, 1869, 1704, 1253, 1983, 1680,
        1679, 1252, 1932, 1479, 1478, 1535}], Line3DBox[CompressedData["
1:eJwVzztOAgEURuHLex2ILaCyDRtQAS0Naqcb0BYqSdRaFoBLcAXG1pgYIYQl
gCgqQvgsTv5zz0wymfzxRe08ERG7WKUjatmIPVRxhWttiUt+lIuY2j/3IX/g
Cz62TXfOvmYifrURb2hZ+6L9aENe1zK2gh18611ti28jjU0U0Nfnnuf5BlIo
o6h9ochLSKLn3YH91J99L8HvtXc7097sgTvsk+cf2r67757yyf9/u2/sHW4x
0R+1Nu+ghVOc4AxroHUrtw==
       "]], Line3DBox[CompressedData["
1:eJwNyqtOAmAYBuDPA5gc4ommIrcgAQ9cgdONgc1isggzOJs4IuAR4QI4NAub
wWtxc85pMBgodp/w7H2/9/+zJ7VSdSoi9olERCUZcUSZa8ZzEU17Xb9izd1y
T7Out+Usbyx479tu9CTf7g13Wt66T+UFr7aJXGSLO2+f/OrP3vJyiQL39mP5
Yt+WOyyzy+FMxJf3Pb3ICgP/HmwH+rtclUPboz7PBxnbyNbRU2T1J5nmz9um
u6s39B9y7jNZ5ZKet3P5D+XyI1Y=
       "]], Line3DBox[CompressedData["
1:eJwVzksug3EUhvHTUL0qYQE0UqzA1KWzqhADl7S0zFzCGsRE6CIYaxMx7kaE
GBAmggFhqD+DJ8/7nnP+X77i7vHqUSIi1jCajNgYiNjEOk5xm4r44RG7E97R
v3lYb8oduSC/ckMf4kc9jxd526zAD3oOH/KN2QovYxBzKGMWWTdvfO1miaeQ
xzQWMNEfkXFTkquYRA4zmEfHu3dOuxnjRYz/fxefuLLf45T9PTLypdkzJ/Un
3tLTfKf3oa639YT8xTX9nFu4wJ9/+uWu+RlXcIB9HKIHIwUnMw==
       "]], 
      Line3DBox[{1301, 1511, 1710, 1935, 1300, 1828, 1431, 1302, 1829, 1432, 
       1303, 1504, 1830, 1433, 1304, 1767, 1831, 1434, 1591, 1628, 1124, 1592,
        1435, 1512, 1936, 1506, 1630, 1632, 1654, 1436, 1648, 1973, 1633, 
       1634, 1631, 1652, 1711, 1975, 1513, 1508, 1578, 1626, 857, 1577, 1509, 
       1832, 1437, 1305, 1510, 1833, 1438, 1306, 1834, 1439, 1307, 1835, 1440,
        1308, 1937, 1514, 1441, 1560}], 
      Line3DBox[{1310, 1712, 1890, 1309, 1713, 1891, 1311, 864, 1312, 1836, 
       1442, 1313, 1837, 1443, 1314, 1938, 1515, 1444, 1561, 1958, 1516, 1445,
        1562, 1959, 1517, 1714, 1939, 1563, 1518, 1715, 1940, 1315, 869, 1316,
        1838, 1446, 1317, 1839, 1447, 1318, 1840, 1448, 1319, 1841, 1449, 
       1320}], Line3DBox[{1322, 1716, 1892, 1321, 1717, 1893, 1323, 1718, 
       1894, 1324, 877, 1325, 1842, 1450, 1326, 1941, 1519, 1451, 1564, 1960, 
       1520, 1452, 1565, 1961, 1521, 1719, 1942, 1566, 1522, 1720, 1943, 1327,
        1721, 1895, 1328, 882, 1329, 1843, 1453, 1330, 1844, 1454, 1331, 1845,
        1455, 1332}], 
      Line3DBox[{1334, 1722, 1896, 1333, 1723, 1897, 1335, 1724, 1898, 1336, 
       1725, 1899, 1337, 1726, 1900, 1338, 1846, 1456, 1339, 1847, 1457, 1340,
        1848, 1727, 1901, 1341, 1728, 1902, 1342, 1729, 1903, 1343, 1730, 
       1904, 1344, 898, 1345, 1849, 1458, 1346, 1850, 1459, 1347}], 
      Line3DBox[{1349, 1731, 1905, 1348, 1732, 1906, 1350, 1733, 1907, 1351, 
       1734, 1908, 1352, 1735, 1909, 1353, 906, 1354, 1851, 1460, 1355, 1852, 
       1736, 1910, 1356, 1737, 1911, 1357, 1738, 1912, 1358, 1739, 1913, 1359,
        1740, 1914, 1360, 914, 1361, 1853, 1461, 1362}], 
      Line3DBox[{1376, 1531, 1023, 1375, 1924, 1748, 1374, 1923, 1747, 1373, 
       1922, 1746, 1372, 1921, 1745, 1371, 1770, 1920, 1530, 1370, 1971, 1529,
        1528, 1945, 1369, 1527, 1019, 1368, 1526, 1919, 1769, 1367, 1918, 
       1744, 1366, 1917, 1743, 1365, 1916, 1742, 1364, 1915, 1741, 1363, 1944,
        1524, 1523, 1525}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{567, 762, 1784, 568, 773, 592, 1856, 786, 607, 1860, 801, 
       622, 1864, 813, 637, 1185, 1983, 825, 649, 1875, 1159, 835, 659, 1883, 
       1167, 844, 1822, 669, 853, 1828, 679, 1891, 863, 691, 1893, 875, 706, 
       1897, 887, 721, 1906, 902, 736, 1915, 917, 751}], 
      Line3DBox[{569, 763, 1785, 570, 774, 1795, 593, 787, 608, 1861, 802, 
       623, 1865, 814, 638, 1869, 826, 650, 1876, 836, 660, 1884, 845, 1823, 
       670, 854, 1829, 680, 864, 692, 1894, 876, 707, 1898, 888, 722, 1907, 
       903, 737, 1916, 918, 752}], 
      Line3DBox[{571, 764, 1786, 572, 775, 1796, 594, 788, 1804, 609, 803, 
       624, 1866, 815, 639, 1870, 952, 827, 651, 1877, 953, 837, 661, 1885, 
       970, 846, 1954, 671, 981, 855, 1830, 681, 865, 1836, 693, 877, 708, 
       1899, 889, 723, 1908, 904, 738, 1917, 919, 753}], 
      Line3DBox[{573, 765, 1787, 574, 776, 1797, 595, 789, 1805, 610, 804, 
       1813, 625, 816, 640, 1871, 954, 955, 1034, 1949, 956, 957, 1041, 1952, 
       971, 972, 1824, 1043, 982, 983, 1831, 682, 866, 1837, 694, 878, 1842, 
       709, 1900, 890, 724, 1909, 905, 739, 1918, 920, 754}], 
      Line3DBox[{575, 928, 929, 1788, 576, 777, 1798, 596, 790, 1806, 611, 
       935, 1925, 936, 626, 943, 1928, 944, 1064, 1120, 958, 1065, 959, 1036, 
       1950, 960, 1135, 961, 1136, 1042, 1953, 1137, 1147, 974, 1152, 975, 
       1151, 1976, 1044, 985, 1079, 986, 1124, 1080, 1000, 1938, 1001, 695, 
       1008, 1941, 1009, 710, 891, 1846, 725, 906, 740, 1919, 1017, 1018, 
       1053}], Line3DBox[{577, 1096, 1097, 1095, 930, 1789, 1155, 1153, 1977, 
       1154, 597, 791, 1807, 612, 937, 1028, 1946, 938, 627, 945, 1929, 1031, 
       946, 1101, 1148, 1974, 1149, 1035, 1087, 1086, 1038, 1069, 1070, 973, 
       1068, 1067, 1089, 1965, 1077, 1078, 984, 1076, 1075, 1964, 1045, 1091, 
       1092, 995, 1936, 988, 1126, 1002, 1047, 1958, 1003, 696, 1010, 1050, 
       1960, 1011, 711, 892, 1847, 726, 907, 1851, 741, 1019, 1139, 1141, 
       1140, 1142}], Line3DBox[CompressedData["
1:eJwVzq1Lg1EcBeDfnKJlsCSDgSJ+VBd1zLKoMnUDQTQpY1q2IvgBNjUM/wHR
ZhA31LAZDPZFm8EqS2ISk8HH8HDOPfe+8E5sN8r1RERUKA5ELA1GLLPIw3DE
TTLiXD/lmhfbmVz3NuMu7VzV2/qQ/cr5Xt+3dWTTecT+pJfkCms82ldligXq
FEgzRst9WY7z6tuc3GGWIpNsMMW7+7ys0vXdvBxlmk1m+PBmTx7//4s3u7LG
pz0jb21f+rP//pZZ253tR+/ZTuSc85t+oRf0vv6rX+pb3h9ywBF//0ooaQ==

       "]], 
      Line3DBox[{581, 768, 1790, 582, 780, 1799, 601, 795, 616, 1862, 807, 
       631, 1867, 819, 643, 1872, 964, 830, 654, 1879, 965, 840, 664, 1886, 
       978, 849, 1956, 674, 991, 858, 1832, 685, 869, 700, 1895, 881, 715, 
       1903, 896, 730, 1912, 911, 745, 1921, 923, 757}], 
      Line3DBox[{583, 769, 1791, 584, 781, 1800, 602, 796, 1809, 617, 808, 
       1814, 632, 1868, 820, 644, 1873, 966, 831, 655, 1880, 967, 841, 665, 
       1887, 979, 850, 1957, 675, 992, 859, 1833, 686, 870, 1838, 701, 882, 
       716, 1904, 897, 731, 1913, 912, 746, 1922, 924, 758}], 
      Line3DBox[{585, 770, 1792, 586, 782, 1801, 603, 797, 1810, 618, 809, 
       1815, 633, 821, 1818, 645, 1874, 832, 656, 1881, 842, 666, 1888, 851, 
       1825, 676, 860, 1834, 687, 871, 1839, 702, 883, 1843, 717, 898, 732, 
       1914, 913, 747, 1923, 925, 759}], 
      Line3DBox[{587, 771, 1793, 588, 783, 1802, 604, 798, 1811, 619, 810, 
       1816, 634, 822, 1819, 646, 833, 1821, 657, 1882, 1162, 1163, 667, 1889,
        1170, 1171, 1826, 677, 861, 1835, 688, 872, 1840, 703, 884, 1844, 718,
        899, 1849, 733, 914, 748, 1924, 926, 760}], 
      Line3DBox[{589, 933, 934, 1794, 590, 784, 1803, 605, 799, 1812, 620, 
       811, 1817, 635, 823, 1820, 647, 968, 1933, 969, 1112, 1165, 1166, 1164,
        980, 1114, 1970, 1173, 1174, 1172, 993, 1827, 1138, 998, 1937, 999, 
       689, 873, 1841, 704, 885, 1845, 719, 900, 1850, 734, 915, 1853, 749, 
       1023, 1024, 1025}], 
      Line3DBox[{750, 916, 1944, 1016, 735, 901, 1905, 720, 886, 1896, 705, 
       874, 1892, 690, 862, 1890, 678, 852, 1935, 994, 668, 1969, 843, 1169, 
       1168, 1179, 1178, 1980, 658, 834, 1161, 1160, 1177, 1979, 1176, 648, 
       824, 1932, 951, 636, 812, 1863, 621, 800, 1859, 606, 785, 1855, 591, 
       772, 1854, 566, 761, 927, 1026}], 
      Line3DBox[{755, 921, 1118, 1117, 1971, 1021, 743, 909, 1910, 728, 894, 
       1901, 713, 879, 1942, 1052, 1013, 698, 867, 1939, 1049, 1005, 683, 856,
        1975, 1150, 997, 1094, 1093, 672, 847, 1083, 989, 1058, 1057, 1963, 
       662, 838, 1056, 977, 1074, 1934, 1073, 652, 828, 1088, 1039, 1951, 962,
        641, 817, 1033, 1948, 948, 629, 805, 1926, 1030, 940, 614, 793, 1857, 
       599, 778, 1978, 1182, 1184, 1183, 579, 766, 1175, 1130, 1132, 1131, 
       1133}], Line3DBox[{756, 922, 1022, 1920, 744, 910, 1911, 729, 895, 
       1902, 714, 880, 1943, 1015, 699, 868, 1940, 1007, 684, 857, 1119, 1063,
        990, 673, 1955, 848, 1109, 1111, 1110, 1968, 663, 839, 1108, 1107, 
       963, 1878, 653, 829, 1066, 1122, 1121, 642, 818, 1931, 950, 630, 806, 
       1927, 942, 615, 794, 1858, 600, 779, 1982, 1181, 580, 1984, 767, 932, 
       1027}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
zH/S7rU/5fJ20DXvpYx5e/UvvQuYt9c0pWEeCPv2hDtxeSDsjdFKxjxwc5PL
EC7vhecl32Ux772W6jcZ814b/hw2PfX489jvlYsEXL0AWSnLLbBeqGl7Wor1
guPagjFc/gmRS04P5fJPqO+jtB3zTzo321e285ytFH9u1vNVvJbtgq9MEoyH
rfergXsPwrQWpsbDn09PO/LYSNmwQSgn4+QpdZSzKDE2GPM9q9aho3G824eF
7Mbx+k168BjzW5fkyzY4rj0/FTvyW+K353arU7rlvUB574h/RmO4eWHRW1bO
x3npt1AoEOflxABbrMuYSL3pdazLJHZc1Me6rFvdwajuKA59NxjxDDydt5bD
k0k1yUxCPHMsTBwQ/6szdgRjHr5Z+EkS6rkpuOaYyaQqmD1LSbhaJQ802qyu
Ncz91B03RriV8uc5DfnznFP485xNpgajU3aujNTqdk/FVbWSk5x8plOd+quK
k39csacJyv8xaCrOO3OesUYF9XSo//a/6p0uvn/fkWcjJzYImOicirV1TtaQ
sfWA37Vlvl12e5zP58luIXu4C9phpPgQNc4OWf2RuA47lP5kH4h2+0MQNQHz
dsnPClo4jwXJRR04DLuwsQeHA5MSWnUV9Rxx+Ewt2ptDQbA1Z2/sSrBrCdpb
93P4I/m6QLTP9OGIg223eyf8a/fu5uwNtlfoiHL2xhp6au1Ge7u6adtxxOfW
p1k98b0FUhmX8L1Zs3XrsS4OT3r1AN8r/OhmEb53zWwXXF9s/dRmFRzX6DYR
fRzXGd7eCrvdL1HYOu8t599Zyy7LEYcXxbDbbrOfo5+fts+qN9b7Q6vE4jm7
Yuutrp9Fu1Jqspu/YnU+sK0zqgfPrWbLl46YPnhfErzR2IPnjiO63y+RqvZP
kevP1sxpKMf+xjtGTMP+rdVfUT67PvUSQ/lNqQ2nUf5w3s7fd9o568vbufpI
uTnoP8UqQ5Zw/pMd2WR0Ef2nplpYKPpbF42zbVh3KAobz0A/VjFlsSX6zzLr
NWs4/8lUl2j5ov8s1PV+gf7WYnFbR/2ySkapo355b12B91JEvOLvLTzN31tY
s1bBGvdnDuoL0A8zvdFh3iiH+tN3z/78d88+iZ/RzzM1oxno51nwofnnUM+Q
Z1VzMH7dmVKD8YvLN2wPYvw6MUjyJMY7048TF2BdEC5wjcE4srFI/RbGLxdH
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
C+lnFURjTuwyfr8Oa/6+X1FdTla4jZoyprWGGGr1dk5hcW94ltnxeIsP5ElJ
ScIIx3oyy2mfumdKDDnveS1u74k35FvTVv1doY1EbYWm43L9OPLnjV+nJoie
kK39708onyUiBUq3tN0nx5Pso3bznEPuJInr7PKfTM7XayunRc4ZTV3ra8g7
WTdR6M/bZEOBYe/a81XU+YbWjSQ/Ng+3FyxY2B5BiGKozyXvGnqj8+ApD7dX
kAOpE6/z+43wLpl3q2sdrdrkGNHtVBnxebhobR57v8pfmhVqFcrJ29cxPtfO
1BK/7zt1Q8ri/4vvuijwXQM3F1ta19VQCY27F6R+lBPHb4mdgtnvOWodLbH6
bB09+vCrk1tSKdnjOvxQA3v+kf5He1ik1lP5lJe/+kWVkKTZaSv5eOsk5rtu
LsQnAUEvRmQca6Cy9p6DF8cVka8nwpcEsPeroqD/8dyKRnrXtHOLqt5b0ui9
bXoeG8//xncNu3hxr8hdRIrctKs89TJouuLd5aOKoknZyKTMc0REPD75+uiF
PaVk2tj978bFk8GPfyleHtJEZmS/mi7dlkv3itSdyjSTyVtvTZXes0V00+SM
Ffvqn1DV9ws/WLD31WrzlvdPcz/0KuX939l32YL3jzqflDAPo973b9zU9lcR
rzO92ffZQ2tq194F1HfOfqNePePIwzyTY5t2N5DWfuXutv5F9Pbgp1vzWhJI
a+4vi+qtdYTEVdusDCuld1w9nSq9ksilB1GWrJ3efXt4OW/P0vVfz9v7BMXy
fuieI1a7eT8TwwM3837OtscOfRjaSN0u0Z46Xm+owTTjxRJsfGrZXJtjvKCJ
Zndp9vLun0d9Ylfd02TfneXai9NPb6slT8cbRvedUE7TFyUNq98VT8K/eO/r
c6yKOGUErlh3qIpWbLU6dUnrHsnUk5748EwtfeEU75+pUE69D26YrcrGVd97
5jlmjvX0L4sQt10WH6j+XJNBOux7uZMtn3XTv4E2HziVruZUREMmRNv1ZvPA
qd3Gac1rGmm30p+7tRTfUnuzneuD2XyYdrR+neTEcrIk7ekAFeda6uh7pK+0
Wzyx053kM6G1hqqdX1xSWF1Op8a3upxj32lwqlJdv6A66lh+0CY4vJRG9D9h
mMDmn3CfphfhmfV0cOXVfpMCSmiaqPfRxh1h5Oa6kdf/7FNAKkMXPFvq3UiL
0z026rL38i1KwrZ75FOSer+8zI6I6Gfn6du+sfFj6SHrJeMZkyTO519ffPGR
zNkaGntilbni5gpqe8a40JbNh3Im4wO0utfRfYOPvOt1vIyOynL4eY2tC84t
LaeNtmeQ4SYv+ndxE1E/kcXbS2zf7TlELsxtfWSSOJfupVscvXRODdULs5yk
8rSCrsvSU9Bg686c4T15OwnSmkJYOzHckN+Xt8v94XuB/V+i9oduCfu/ZGiU
XJfr7P8a2j95wH4naZuXasl+J9keWVrEf+cnnZDV7H7pwbRb/H7JCFPLHfx+
l2xIiWLPh+oYfXzCng8pjm925M/nQnTac/Y8iUymtip7nmTess8n+POUGv+k
hj1/oq6xaSV7/qQtqmQyf/6vffVOsfdFTNIrStn7Ig0JYTv4+9pX68LfL932
/I+B7P2Syk7v+/D3u2qbTCobD0Rhvdd+Nh7IkNcxTnw8NNeeecrGD9F2t3nM
xg9Z1d9wPR8/3ulmuWy8Ef2DrTvZeCOX6jTV+Hg7HraUj09iFWbExyfJs/lk
xsenp+vivWw8U1ePNyvZeCbWY6w7xrNx5HQ+/ul3r2A+/knMlbXD+fh3jf/A
vyNCfkT1YN8RsdPZbc6/o5cLJY7z77dqesUu9t0R626h2/h317yk0op/v4bl
+yzZd0r0Jlzdyr9T0iJpzb9fK92PFrx90IfoTbw9dccz3g8VRX3cwfsxXebu
xPuR/ylbwOYNelnuwjg2b5DwBLkJfN6wrNO46eYhIkdO13/R1sggCWbmew3y
oknOi4+D2DxGrr+NWMXmMXL60bpyPo+h7m8l1P3jhLrzueQyteRxDXTu7pxO
w+vfEckX5S/SumQS0WEnJTZP0lattIlsniT5jyo28nkSdfk1Ql0edeFNUi18
vqXBXZq92XxLosaq7eHz7auJon18/lx4ZHgmmz9Jnx0jl/H584GQp0P8dlfs
/MoFQv5B/PxKxOHgH1qFujLi6gSx8ygRV6NenCR8t+eFPEar2HmUiBvx3ZWn
xTex9YgoZRS2sfWIzmp+bcrXo7pltsPZ+kV0akb8wdYvWlWz2ZKvX8VPEuTZ
OkgKu6t06R9VQnstk1rL18F7fit+rWLxyrTltdvZukn9+i3w5OumpE6FOVtn
SZb0xkC2ztKaXSu68HXWY8SGHmy9po5Zq/l6TcMlmrX4ej3Bd6MpW99JmojE
sPWdZpR7OfD1fc+4zV4sHiD3yblZLB6gmxe63uTxgN92Q3kWP5Dkl1rhLH6g
G1x+xw+1cSdzWLxBnBQeNbN4g9aMzGvk8Ya4Xz3yCar9lU6weIYe//qZxzO0
dMt5TR7PmLrEx7P4h82n03j8Q/VHNjnw+Cf5r1YvFi/RkXPr7rB4iebY+6vy
eMltwOZ7LL6i+7UmTGPxFZ15ZvVWHl9VJM/pxOIxYr5ApoDFY/TirE+WPB47
MX/xIBa/kZ69dPay+I0e3/U7fvM7utOexXtkevuBnizeo00jrFfz+/17T1Ux
iw/JpggfTRYf0kGy7i08PjQd9LGIxZPEN2DkEBZP0ldrgzx4PBn6h57OyU/p
NDbzwT2nvSJqoWj941dVNKmXUQ1kcSmddW7MERaX0oqK1gs8LvWu/fyExbH0
w/Vd5iyOpV+MU9bzODb7YD8LFvdS8+Ird1jcS5cmDxjI494f3Yp8WJxM79jI
NbI4mXazGqnD42SF80WExdtkufWz7izepmplY2T5/b7VkHVg8TkJLt/xncXn
tNH9VhaPz5+2mEWxeJ7sGe9hyeJ5unjkj0l8XPV7er0/i/9JgHvPBhb/U49Q
w1+v2fh8ImWnyfcRW9YsW8X2EbTmq8Q1vo+QVDfWZe30h3oI31/QHbuXX+Xt
3f5sus32I3T3meYdbD9Cd96r2s73I52nh15m+xca2jKmjO1fqGqx0WC+f5ng
ph/O9jtUep+CCtvv0Dcl387y/c71w/34/oj6Ld/+ge2PqMW2JeP5/sh6gKT+
MjavEZ3vc/l8eelGVs8TXxKIp5j/Z4wwLyl//Hssu542xhp3XD+sa70Cv/76
mXCZo2zeDMublZbB5tcXyt2DjnknkRsn7nbOZvOU7cbpg9xZfFfUO/G1hFYy
udHlfVWhQ0qSuJ+AvXovedYPnWpvl8z7OWXeEsj7KbQyne/J9l0zLK1mfmXP
T7Ff65raQRHEc90X3k4VfEun8vboc202vL23sE/++vr3vrmzwDOY1l2cx/tp
uzfejF1P+6Uv6ejnXNhV25cN78jNzGUPzdi8G9I6+tFxqUzS+mVaR/8pLY/4
/6V3pph39O93eoA0v99Ld9ems99J78zsF8B/Z7EH5fdLlxmu5fdLtcLoK36/
fs63u/P72jBXMZVf/zhd0o9fX+kpr8ef//yFafP4OpM/KkiOP88zAt/jI8zr
34T5PM7c9U/+/CV2h/PnTxe0UFl+PfaBY8T8b1sun8rNc76V9F/6LzE/2Lh/
8YPFfH519lIZfl92B/Yr8/eY7RHQ8R5jpqf05nF7xgy9yXw9inw7pSNu31tU
qsrWL7J//uiufP2SoeNz+fo1N8XXgT1nauY05gF7zuTcw5QU/pwxDpC3EfdZ
Rb4iXfBZxbg8JozTWOH337qwoGPdHBZrK8X+Lx04Ojqb/98Jm0r576TpfSby
30nfec/qWDfBU/kIz/uL8JyPDjGV4OP2zrlPHe/RVN06h99vmu2dUj5uxbmp
NWJ+qt/+xU8V651eYueTBv/DxwB19EeG5d4G/+/c52/COMa4xngeKvx9a9nU
0/z6PUI/u772yefvHVxHF4HrEPczBI+Bui+4CNR/odN5K3YeE8YT8jMYV1LL
/zdv+b3HDS+D/8EJiPuw4f/GKgzZ2zi1iKwcGjjQQKOBfFma6KZ0+zHRb5Hb
zdppH68kZdZO8/vc3snb6zWvf+PXOb68fVduWhGdE/AmyT7qMREdsY5WHJ1B
tvXodaWW7UcTQ22ujWVxzuyr8U/iNTLoOo/Ur9tZvPaqv+I4Ixanoe4ZLuaj
heeIvBM4GblrXtvlR0cnidc3G/6lToc6o55QZxwk1Bk7tY6TXnf+FZ1auPZl
yt0m8qRi9y4TNs/8H8yeEyQ=
    "]],
  AutomaticImageSize->True,
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{364.30616419594617`, 313.88122873719175`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-10, 10}, {-10, 10}, {0., 199.99994285714695`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.3956293040992579, -2.336406791882062, 2.415508384706074},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.715827820883038*^9, 3.715827848729064*^9}, 
   3.715828104256147*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["7) Differentiation", "Subsection",
 CellChangeTimes->{{3.713478926034465*^9, 3.713478943585582*^9}, 
   3.71366195006758*^9, {3.7158933474308167`*^9, 3.715893347766782*^9}, {
   3.715894941831684*^9, 3.715894944318015*^9}, {3.715896529704382*^9, 
   3.715896529990843*^9}}],

Cell[CellGroupData[{

Cell["7.1) Functions of One Variable", "Subsubsection",
 CellChangeTimes->{{3.7158949075698767`*^9, 3.715894969310515*^9}, {
  3.715896531472337*^9, 3.7158965315269423`*^9}}],

Cell["\<\
Now that you know the basics of how to play around with variables and \
functions, it will be very useful to know how to compute derivatives and \
integrals since P-chem is expecting you to already know how to do them. But \
it\[CloseCurlyQuote]s always nice to have a program that you can use to check \
your work. \
\>", "Text",
 CellChangeTimes->{{3.713479075957306*^9, 3.713479156086997*^9}, {
  3.7136632257524843`*^9, 3.713663231272464*^9}, {3.7156430340808487`*^9, 
  3.715643044151647*^9}, {3.7158950129677687`*^9, 3.715895043071451*^9}}],

Cell["\<\
Starting with defining a function h(x), there are two ways we can compute its \
derivative. \
\>", "Text",
 CellChangeTimes->{{3.7134791626483707`*^9, 3.713479206769351*^9}, {
   3.713479260428713*^9, 3.713479276931202*^9}, {3.713663047950205*^9, 
   3.71366305199009*^9}, 3.715894883257289*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "[", "x_", "]"}], ":=", 
  RowBox[{"3", "*", 
   RowBox[{"x", "^", "5"}]}]}]], "Input",
 CellChangeTimes->{{3.713479279139336*^9, 3.713479293124103*^9}, {
   3.7134794978618717`*^9, 3.713479504813492*^9}, {3.713479572771834*^9, 
   3.713479579632002*^9}, {3.713479766784395*^9, 3.71347976738301*^9}, {
   3.7136624461775923`*^9, 3.713662469112472*^9}, {3.713662499812709*^9, 
   3.713662509160935*^9}, {3.713662543437139*^9, 3.713662546556898*^9}, {
   3.713663054675097*^9, 3.7136630559190493`*^9}, 3.713663157952352*^9}],

Cell[TextData[{
 "The first way is to use the function ",
 StyleBox["D",
  FontWeight->"Bold"],
 ", which requires the argument to be the function whose derivative is being \
computed and the variable \nits taken with respect to, separated by a comma. \
"
}], "Text",
 CellChangeTimes->{{3.713479332244359*^9, 3.7134793990699*^9}, {
   3.713663070062519*^9, 3.713663070390546*^9}, 3.713663223480218*^9, {
   3.715643060567937*^9, 3.715643063320054*^9}, 3.715894884953413*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"h", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.71347930927352*^9, 3.7134793253890142`*^9}, {
  3.713479528030757*^9, 3.7134795283184013`*^9}, {3.7134795612597227`*^9, 
  3.7134795700507183`*^9}, {3.713662512369401*^9, 3.7136625399802017`*^9}, {
  3.713663058859005*^9, 3.713663058967108*^9}}],

Cell[BoxData[
 RowBox[{"15", " ", 
  SuperscriptBox["x", "4"]}]], "Output",
 CellChangeTimes->{{3.713479570469014*^9, 3.713479582296268*^9}, 
   3.71347976947274*^9, {3.713662472551056*^9, 3.7136625495841923`*^9}, 
   3.713663159957239*^9, 3.715643111792715*^9}]
}, Open  ]],

Cell["\<\
The second way is to type the function with an apostrophe ( \[OpenCurlyQuote] \
) that can be treated like the \[OpenCurlyDoubleQuote]prime\
\[CloseCurlyDoubleQuote]. For example,  \[OpenCurlyDoubleQuote]h prime\
\[CloseCurlyDoubleQuote] is the first derivative, \[OpenCurlyDoubleQuote]h \
double prime\[CloseCurlyDoubleQuote] is the second derivative, etc.\
\>", "Text",
 CellChangeTimes->{{3.713479409686227*^9, 3.713479475524138*^9}, {
   3.713663098326833*^9, 3.713663182975747*^9}, 3.713663218639323*^9, {
   3.71564308328027*^9, 3.7156431021127653`*^9}, {3.7158273581981583`*^9, 
   3.715827369981262*^9}, {3.715895091896776*^9, 3.715895102160739*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "'"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.7134794776829557`*^9, 3.713479488197048*^9}, {
  3.713479533478734*^9, 3.713479558086808*^9}, {3.713662516881331*^9, 
  3.713662537011167*^9}, {3.7136630613228283`*^9, 3.713663061463135*^9}}],

Cell[BoxData[
 RowBox[{"15", " ", 
  SuperscriptBox["x", "4"]}]], "Output",
 CellChangeTimes->{{3.7134794794678593`*^9, 3.713479488579596*^9}, {
   3.7134795344220047`*^9, 3.713479584247613*^9}, 3.71347977145719*^9, {
   3.713662491575699*^9, 3.713662520930873*^9}, 3.713662551132062*^9, 
   3.713663161612864*^9, 3.71564311402666*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "''"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.713663163352201*^9, 3.713663164472054*^9}, {
  3.715643120345929*^9, 3.7156431255405073`*^9}}],

Cell[BoxData[
 RowBox[{"60", " ", 
  SuperscriptBox["x", "3"]}]], "Output",
 CellChangeTimes->{
  3.713663164877378*^9, {3.715643118695002*^9, 3.715643126200655*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "'''"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.715643176496751*^9, 3.715643178722631*^9}}],

Cell[BoxData[
 RowBox[{"180", " ", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.7156431792815332`*^9}]
}, Open  ]],

Cell[TextData[{
 "Using the apostrophe does not work with functions that have more than one \
variable, so it is best to stick with the function ",
 StyleBox["D",
  FontWeight->"Bold"],
 ". To compute \nmultiple derivatives with ",
 StyleBox["D",
  FontWeight->"Bold"],
 ", type  ",
 StyleBox["D[ h[x] , {x,n} ]",
  FontWeight->"Bold"],
 " , where n is the n-th derivative you want to compute. "
}], "Text",
 CellChangeTimes->{{3.713479586726389*^9, 3.713479651143887*^9}, {
   3.713479710302703*^9, 3.713479764190468*^9}, {3.713663199400152*^9, 
   3.713663212416312*^9}, {3.713663245656787*^9, 3.71366324931289*^9}, {
   3.713663367049913*^9, 3.713663367546013*^9}, {3.715643142442685*^9, 
   3.7156431627940187`*^9}, 3.7158948897216463`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"h", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.713479774253025*^9, 3.713479784055448*^9}, {
  3.713663350190928*^9, 3.713663350602828*^9}}],

Cell[BoxData[
 RowBox[{"180", " ", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.7134797844318037`*^9, 3.71366255787529*^9, 
  3.713663351398416*^9}]
}, Open  ]],

Cell[TextData[{
 "The evaluated cell above is the same as saying ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    FractionBox[
     RowBox[{
      SuperscriptBox["\[PartialD]", "3"], 
      RowBox[{"g", "(", "x", ")"}]}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", "3"]}]],
    FontSize->18], TraditionalForm]]],
 " = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"180", 
    SuperscriptBox["x", "2"]}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{{3.713479792366907*^9, 3.713479855889518*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.2) Functions of Multiple Variables", "Subsubsection",
 CellChangeTimes->{{3.715894981046755*^9, 3.715894991439124*^9}, {
  3.715896534088313*^9, 3.715896534175009*^9}}],

Cell[TextData[{
 "For functions with multiple variables, you can take partial derivatives by \
typing  ",
 StyleBox["D[ f[ x, y, z, ...], x , y, z, ...]",
  FontWeight->"Bold"],
 "  where Mathematica \ndifferentiates your function with respect to the \
leftmost vairable in the argument and continues to the rightmost variable. "
}], "Text",
 CellChangeTimes->{{3.7136613043071957`*^9, 3.713661309987379*^9}, {
   3.713661788201809*^9, 3.713661937370143*^9}, {3.713662590681126*^9, 
   3.713662606921245*^9}, 3.7136632555850353`*^9, {3.7136633742422028`*^9, 
   3.713663374818215*^9}, {3.715643200666627*^9, 3.715643205554737*^9}, {
   3.715827301227153*^9, 3.715827314127808*^9}, {3.715827358228601*^9, 
   3.7158273700109673`*^9}, 3.715894901673806*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"a", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"2", 
     SuperscriptBox["y", "2"]}], "+", 
    RowBox[{"x", "*", 
     RowBox[{"y", "^", "2"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"a", "[", 
  RowBox[{"x", ",", "y"}], "]"}]}], "Input",
 CellChangeTimes->{{3.713661312994091*^9, 3.7136613132922497`*^9}, {
  3.713661346875195*^9, 3.713661534506586*^9}, {3.7136616851686487`*^9, 
  3.71366170557672*^9}, {3.713661738582143*^9, 3.713661769617374*^9}, {
  3.715643222357705*^9, 3.715643248972378*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"x", " ", 
   SuperscriptBox["y", "2"]}]}]], "Output",
 CellChangeTimes->{
  3.713661784251309*^9, {3.715643212535563*^9, 3.715643249396305*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"a", "[", 
    RowBox[{"x", ",", "y"}], "]"}], ",", "x", ",", "y"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"2", " ", "y"}]], "Output",
 CellChangeTimes->{{3.715643227517514*^9, 3.71564325249785*^9}}]
}, Open  ]],

Cell["\<\
So Mathematica differentiated the function with respect to x first and then \
with respect to y.\
\>", "Text",
 CellChangeTimes->{{3.715643262840831*^9, 3.7156432844751987`*^9}, {
  3.715827301258774*^9, 3.715827314158636*^9}, {3.71582735825963*^9, 
  3.7158273700411654`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["8) Integration", "Subsection",
 CellChangeTimes->{{3.7136619570677*^9, 3.713661959218192*^9}, {
  3.715893351566863*^9, 3.715893351920239*^9}, {3.715895134050126*^9, 
  3.715895134385627*^9}, {3.7158965365915213`*^9, 3.715896536663039*^9}}],

Cell[CellGroupData[{

Cell["8.1) Functions of One Variable", "Subsubsection",
 CellChangeTimes->{{3.715895144241789*^9, 3.715895147819031*^9}, {
  3.7158965383444757`*^9, 3.7158965384071083`*^9}}],

Cell[TextData[{
 "As for integrals, there is only one way to compute them. An indefinite \
integral (an integral without limits) can be computed by\ntyping ",
 StyleBox["Integrate[ g[x] , x] ",
  FontWeight->"Bold"],
 ". We can use h(x) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", 
    SuperscriptBox["x", "5"]}], TraditionalForm]]],
 " from before. "
}], "Text",
 CellChangeTimes->{{3.713479866283373*^9, 3.7134799068750362`*^9}, {
   3.7136610758139343`*^9, 3.713661122358355*^9}, {3.713661217441388*^9, 
   3.713661218729245*^9}, 3.7136632586887712`*^9, {3.715643291155036*^9, 
   3.715643309563519*^9}, {3.715643343108123*^9, 3.7156433681005993`*^9}, 
   3.715895141241951*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"h", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.713661006257481*^9, 3.713661022321363*^9}, {
  3.7156433330556507`*^9, 3.7156433333245296`*^9}}],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["x", "6"], "2"]], "Output",
 CellChangeTimes->{
  3.7136610229384937`*^9, {3.715643317991263*^9, 3.715643333693824*^9}, 
   3.715643370871262*^9}]
}, Open  ]],

Cell[TextData[{
 "A definite integral (an integral with limits) can be computed by typing ",
 StyleBox["Integrate[ g[x] , {x, a, b} ]  ",
  FontWeight->"Bold"],
 "where a is the lower limit and \nb is the upper limit. "
}], "Text",
 CellChangeTimes->{{3.713661033629735*^9, 3.713661054885311*^9}, {
   3.713661125686905*^9, 3.713661234001726*^9}, 3.713663261336605*^9, {
   3.715643379020906*^9, 3.7156433880448303`*^9}, 3.715895198955275*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"h", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.713661152573572*^9, 3.7136611670728273`*^9}, {
  3.7156433913290653`*^9, 3.71564339167772*^9}, {3.715716657538445*^9, 
  3.71571666137248*^9}}],

Cell[BoxData[
 FractionBox["63", "2"]], "Output",
 CellChangeTimes->{
  3.7136611675961723`*^9, {3.7156433728741093`*^9, 3.715643392024446*^9}, 
   3.715895272370902*^9}]
}, Open  ]],

Cell[TextData[{
 "The above cell says that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{" ", 
      RowBox[{"-", "1"}]}], 
     RowBox[{"  ", "2"}]], " ", 
    RowBox[{"3", 
     SuperscriptBox["x", "5"], "dx"}]}], TraditionalForm]],
  FontSize->16],
 " = ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    FractionBox["63", "2"],
    FontSize->16], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.715895213721266*^9, 3.715895280617055*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["8.2) Functions of Multiple Variables", "Subsubsection",
 CellChangeTimes->{{3.715895161835676*^9, 3.7158951664504642`*^9}, 
   3.715896540936832*^9}],

Cell[TextData[{
 "For functions with multiple variables, take 3 variables for example, you \
can type  ",
 StyleBox["[ f[x] , {x , ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "1"], TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox[", ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "1"], TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox["} , {y , ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "2"], TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox[" , ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "2"], TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox["} , {z, ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "3"], TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox[", ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "3"], TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox["} ]",
  FontWeight->"Bold"],
 "  which computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{" ", 
      SubscriptBox["a", "1"]}], 
     RowBox[{" ", 
      SubscriptBox["b", "1"]}]], 
    RowBox[{
     SubsuperscriptBox["\[Integral]", 
      RowBox[{" ", 
       SubscriptBox["a", "2"]}], 
      RowBox[{" ", 
       SubscriptBox["b", "2"]}]], 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{" ", 
        SubscriptBox["a", "3"]}], 
       RowBox[{" ", 
        SubscriptBox["b", "3"]}]], 
      RowBox[{
       RowBox[{"f", "(", "x", ")"}], "dz", " ", "dy", " ", "dx", " "}]}]}]}], 
   TraditionalForm]],
  FontSize->16],
 ". To compute the integral without limits of integration, use the integrate \
function without adding limits nor curly braces in the argument ",
 StyleBox["[ f[x] , x , y , z ] ",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{{3.713661287418993*^9, 3.713661298715095*^9}, {
   3.7136620737086773`*^9, 3.7136620747633467`*^9}, {3.713662137317584*^9, 
   3.7136623012938538`*^9}, {3.713662374763389*^9, 3.713662432999322*^9}, {
   3.715643405069676*^9, 3.7156435449030523`*^9}, 3.715644384227556*^9, {
   3.715713546534801*^9, 3.715713567951901*^9}, {3.71589531320277*^9, 
   3.71589531772209*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["8.3) Numerical Integration", "Subsubsection",
 CellChangeTimes->{{3.71589533825565*^9, 3.715895343087688*^9}, {
  3.715896542391083*^9, 3.7158965424398518`*^9}}],

Cell[TextData[{
 "If an integral cannot be evaluated exactly, you can find a numerical \
approximation by using ",
 StyleBox["NIntegrate. ",
  FontWeight->"Bold"],
 "For example, if you try to evaluate",
 StyleBox[" ",
  FontSize->16],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{" ", "0"}], 
     RowBox[{" ", "\[Infinity]"}]], " ", 
    RowBox[{
     SuperscriptBox["e", 
      RowBox[{"-", 
       SuperscriptBox["x", "3"]}]], "dx"}]}], TraditionalForm]],
  FontSize->16],
 " , Mathematica will output ..."
}], "Text",
 CellChangeTimes->{{3.7156437902424097`*^9, 3.715643933258779*^9}, {
   3.715827301289858*^9, 3.7158273141904087`*^9}, {3.715827358290002*^9, 
   3.715827370071521*^9}, 3.7158953356478977`*^9, {3.715895793314349*^9, 
   3.715895802170536*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", 
     RowBox[{"x", "^", "3"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.715643944618154*^9, 3.7156439463028793`*^9}}],

Cell[BoxData[
 RowBox[{"Gamma", "[", 
  FractionBox["4", "3"], "]"}]], "Output",
 CellChangeTimes->{3.715643946817418*^9}]
}, Open  ]],

Cell[TextData[{
 "So we just add the ",
 StyleBox["N ",
  FontWeight->"Bold"],
 "in front of the whole thing, and we get a numerical approximation. "
}], "Text",
 CellChangeTimes->{{3.7156439498271093`*^9, 3.715643996444106*^9}, {
  3.715895810162668*^9, 3.7158958199949827`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", 
     RowBox[{"x", "^", "3"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.715643998097597*^9, 3.7156440022368193`*^9}, {
  3.7158957787013683`*^9, 3.7158957809837437`*^9}}],

Cell[BoxData["0.8929795115694823`"], "Output",
 CellChangeTimes->{3.7156440027204247`*^9, 3.7158957815942297`*^9}]
}, Open  ]],

Cell["\<\
For extra information, Mathemtica uses adaptive quadrature as the default \
method for integrating a function numerically. \
\>", "Text",
 CellChangeTimes->{{3.7158958276829653`*^9, 3.715895867434062*^9}}],

Cell["\<\

And that\[CloseCurlyQuote]s all the basics of Mathematica that you need to \
know to get through this course! As you continue in the P-chem series, you\
\[CloseCurlyQuote]ll see that you can use everything you learned in this \
notebook in any of those courses as well. You can even use what you learned \
here for any other course you\[CloseCurlyQuote]ll have to take! Good luck! \
\>", "Text",
 CellChangeTimes->{{3.712947794993376*^9, 3.712947803828897*^9}, {
  3.713478259871146*^9, 3.713478261168009*^9}, {3.715643728550558*^9, 
  3.7156437513340263`*^9}, {3.715643786402804*^9, 3.715643787481732*^9}, {
  3.7156442135452642`*^9, 3.715644237798955*^9}, {3.715644596489819*^9, 
  3.715644714811208*^9}, {3.71589587921065*^9, 3.7158959864290333`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["9) Extra features", "Subsection",
 CellChangeTimes->{{3.715818930907648*^9, 3.7158189413078833`*^9}, {
  3.715827187356245*^9, 3.7158271889063063`*^9}, {3.715828278911324*^9, 
  3.715828294750236*^9}, {3.715893355638981*^9, 3.715893356118989*^9}, {
  3.715896545640668*^9, 3.7158965458793*^9}}],

Cell["\<\
As I said before, courses such as Chem 5 do not discuss a few shortcuts and \
features that are built into Mathematica but are useful to know. \
\>", "Text",
 CellChangeTimes->{{3.715818944269291*^9, 3.715818949308037*^9}, {
  3.715819067910775*^9, 3.715819094015414*^9}, {3.71581948656736*^9, 
  3.715819503119854*^9}, {3.7158217790045424`*^9, 3.715821781227059*^9}, {
  3.715822160683455*^9, 3.715822339629655*^9}, {3.715827301320559*^9, 
  3.715827314221142*^9}, {3.715827358320325*^9, 3.715827370101709*^9}, {
  3.715896007677594*^9, 3.715896017621916*^9}}],

Cell[CellGroupData[{

Cell["9.1) Symbols ", "Subsubsection",
 CellChangeTimes->{{3.715822936632605*^9, 3.715822941336441*^9}, {
  3.7158935285804243`*^9, 3.715893529388872*^9}, {3.715896547208756*^9, 
  3.715896547455167*^9}}],

Cell[TextData[{
 "Many times, equations come with variables and constants such as  \[Theta] , \
\[Rho] , and \[Pi]. One way to input these symbols into your cell without \
having to go through the \[OpenCurlyDoubleQuote]Palettes\
\[CloseCurlyDoubleQuote] section each time is to use the ",
 StyleBox["esc",
  FontWeight->"Bold"],
 " key on your keyboard. If you hit the escape key once and type the first \
letter of any symbol\[CloseCurlyQuote]s name, you\[CloseCurlyQuote]ll get the \
option to choose what symbol you want to add. "
}], "Text",
 CellChangeTimes->{{3.7158223435736513`*^9, 3.7158226329681807`*^9}, {
   3.715822669170102*^9, 3.715822681920755*^9}, 3.715895998357444*^9}],

Cell["\<\
You can even use symbols such as theta, kappa, and epsilon as variables like \
you would with x, y, and z. Just remember to check for the blue and black \
coloring of the variable. \
\>", "Text",
 CellChangeTimes->{{3.715822702981761*^9, 3.71582276612481*^9}, {
   3.715822797571251*^9, 3.71582290420296*^9}, 3.7158236774633713`*^9, 
   3.715896000309209*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Theta]", "=", "30", " "}]], "Input",
 CellChangeTimes->{{3.7158230005445347`*^9, 3.7158230102329407`*^9}}],

Cell[BoxData["30"], "Output",
 CellChangeTimes->{3.715823013452382*^9, 3.7158282444303093`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "\[Theta]", "]"}]], "Input",
 CellChangeTimes->{{3.715823015552342*^9, 3.715823020026305*^9}}],

Cell["\<\

A very useful tip is that if you want to clear every variable in a notebook \
at once, you can type and evaluate the following cell:\
\>", "Text",
 CellChangeTimes->{{3.715828195419932*^9, 3.7158282253167133`*^9}, {
  3.715896060320572*^9, 3.715896080268722*^9}}],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.715828228585585*^9, 3.715828238533682*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.2) Typing ", "Subsubsection",
 CellChangeTimes->{{3.715823059729669*^9, 3.715823061024172*^9}, {
  3.715893531476454*^9, 3.715893532379859*^9}, {3.7158965495685883`*^9, 
  3.715896549823304*^9}}],

Cell[TextData[{
 "\nIf you need to add a superscript to something, type ",
 StyleBox["control-6 ",
  FontWeight->"Bold"],
 "immediately after anything you want to add a subscript to. For subscripts, \
type ",
 StyleBox["control-(dash)",
  FontWeight->"Bold"],
 ".  "
}], "Text",
 CellChangeTimes->{{3.715823072905672*^9, 3.7158232302634563`*^9}, {
  3.715824754669133*^9, 3.715824755659485*^9}, {3.715896098821382*^9, 
  3.715896147420084*^9}}],

Cell[TextData[{
 "If you want to type a fraction, type ",
 StyleBox["control-(forward slash). ",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.715823237794886*^9, 3.715823330517695*^9}, {
  3.715896119003244*^9, 3.715896120203224*^9}}],

Cell[TextData[{
 "If you want to type a square root, type ",
 StyleBox["control-2.",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.715823381374627*^9, 3.715823399054522*^9}, {
  3.715896125091517*^9, 3.715896126202589*^9}}],

Cell[TextData[{
 "For the less than sign, type ",
 StyleBox["esc-(<)-(=)-esc. ",
  FontWeight->"Bold"],
 "For the greater than sign, type ",
 StyleBox["esc-(>)-(=)-esc",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{{3.715823439548884*^9, 3.715823459635878*^9}, {
  3.7158235001422443`*^9, 3.715823587800722*^9}, {3.7158247682776003`*^9, 
  3.715824769445409*^9}}],

Cell[TextData[{
 "Shortcuts that some people may find intuitive like bold lettering (",
 StyleBox["command-b",
  FontWeight->"Bold"],
 "), italics (",
 StyleBox["command-i",
  FontWeight->"Bold"],
 "), undo (",
 StyleBox["command-z",
  FontWeight->"Bold"],
 "), copy (",
 StyleBox["command-c",
  FontWeight->"Bold"],
 "), and paste (",
 StyleBox["command-v",
  FontWeight->"Bold"],
 ")",
 StyleBox[" ",
  FontWeight->"Bold"],
 "all work the same in ",
 "Mathematica",
 "."
}], "Text",
 CellChangeTimes->{{3.715824117171411*^9, 3.715824266652946*^9}, {
  3.7158273583515663`*^9, 3.715827370132534*^9}, {3.7158961810141773`*^9, 
  3.715896181700746*^9}}],

Cell[TextData[{
 "If you want to make notebooks look pretier, like I failed to do, highlight \
any text that you want to change the color of and go through the ",
 StyleBox["Format ",
  FontWeight->"Bold"],
 "section on top of the page. If you want to add a frame over a cell, like \
one that contains the answer to a question, you can click on the blue frame \
under ",
 StyleBox["Cell Properties",
  FontWeight->"Bold"],
 " in the ",
 StyleBox["Writing Assistant",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{{3.715824280189727*^9, 3.7158243019824457`*^9}, {
  3.715824431912917*^9, 3.715824435216877*^9}, {3.715824551131961*^9, 
  3.7158245951123133`*^9}, {3.71582462828266*^9, 3.715824726643055*^9}, {
  3.7158962023323193`*^9, 3.715896219309211*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.3) Evaluations", "Subsubsection",
 CellChangeTimes->{{3.715824866736767*^9, 3.715824871687537*^9}, {
  3.715828176003796*^9, 3.715828176939598*^9}, {3.7158282874699917`*^9, 
  3.715828289742076*^9}, {3.715893535379911*^9, 3.715893536684382*^9}, {
  3.715896552440791*^9, 3.71589655269554*^9}}],

Cell[TextData[{
 "If you want to evaluate every cell in a notebook all at once, just click on \
",
 StyleBox["Evaluate Notebook ",
  FontWeight->"Bold"],
 "under ",
 StyleBox["Evaluation",
  FontWeight->"Bold"],
 " at the top of the page. "
}], "Text",
 CellChangeTimes->{{3.71582487667867*^9, 3.7158248775755987`*^9}, {
  3.7158249282560673`*^9, 3.715825057556662*^9}, {3.715825201075736*^9, 
  3.715825213298276*^9}, {3.715896349313614*^9, 3.715896353240059*^9}}],

Cell[TextData[{
 "If a compuation is taking too long, you can just press ",
 StyleBox["command-(.) ",
  FontWeight->"Bold"],
 "to stop the evaluation. You can also click on ",
 StyleBox["Abort Evaluation",
  FontWeight->"Bold"],
 " in the ",
 StyleBox["Evaluation",
  FontWeight->"Bold"],
 " section on top of the page. Try it for yourself! Evaluate the cell below \
and Mathematica will print every prime number starting from 1 to 10,000 and \
it will pause for 0.5 seconds between printing. I have no idea how long that \
will take."
}], "Text",
 CellChangeTimes->{{3.7158252162990837`*^9, 3.7158252955449*^9}, {
   3.715825572537991*^9, 3.71582566709275*^9}, {3.7158257011576777`*^9, 
   3.715825762542767*^9}, {3.7158270788289223`*^9, 3.715827089261241*^9}, {
   3.715827301351766*^9, 3.715827314252067*^9}, {3.715827358382702*^9, 
   3.715827370164308*^9}, 3.715828181955803*^9, {3.7158962298419933`*^9, 
   3.715896232745885*^9}, {3.7158963647440977`*^9, 3.715896397520849*^9}}],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"Prime", "[", "n", "]"}], "]"}], ";", 
    RowBox[{"Pause", "[", "0.5", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10000"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.71582535401105*^9, 3.715825367683291*^9}, {
  3.715825422593717*^9, 3.7158255670989447`*^9}, {3.71582706540236*^9, 
  3.715827081821598*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{978, 719},
WindowMargins->{{121, Automatic}, {Automatic, 15}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 170, 3, 74, "Section"],
Cell[595, 20, 1105, 23, 106, "Text"],
Cell[CellGroupData[{
Cell[1725, 47, 299, 4, 44, "Subsection"],
Cell[CellGroupData[{
Cell[2049, 55, 160, 2, 35, "Subsubsection"],
Cell[2212, 59, 762, 19, 68, "Text"],
Cell[2977, 80, 962, 16, 68, "Text"],
Cell[3942, 98, 1000, 26, 68, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4979, 129, 163, 2, 35, "Subsubsection"],
Cell[5145, 133, 1867, 66, 157, "Text"],
Cell[7015, 201, 242, 8, 30, "Text"],
Cell[7260, 211, 340, 6, 30, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7649, 223, 308, 4, 44, "Subsection"],
Cell[7960, 229, 652, 12, 30, "Text"],
Cell[CellGroupData[{
Cell[8637, 245, 115, 2, 28, "Input"],
Cell[8755, 249, 119, 2, 28, "Output"]
}, Open  ]],
Cell[8889, 254, 574, 14, 49, "Text"],
Cell[9466, 270, 754, 15, 68, "Text"],
Cell[CellGroupData[{
Cell[10245, 289, 117, 2, 28, "Input"],
Cell[10365, 293, 72, 1, 28, "Output"]
}, Open  ]],
Cell[10452, 297, 822, 12, 68, "Text"],
Cell[CellGroupData[{
Cell[11299, 313, 270, 6, 28, "Input"],
Cell[11572, 321, 123, 2, 28, "Output"]
}, Open  ]],
Cell[11710, 326, 410, 7, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12157, 338, 212, 3, 44, "Subsection"],
Cell[12372, 343, 359, 6, 30, "Text"],
Cell[CellGroupData[{
Cell[12756, 353, 94, 1, 28, "Input"],
Cell[12853, 356, 97, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12987, 362, 69, 1, 28, "Input"],
Cell[13059, 365, 106, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13202, 371, 69, 1, 28, "Input"],
Cell[13274, 374, 104, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13415, 380, 117, 2, 28, "Input"],
Cell[13535, 384, 109, 2, 28, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13693, 392, 279, 4, 44, "Subsection"],
Cell[13975, 398, 359, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[14359, 409, 117, 2, 28, "Input"],
Cell[14479, 413, 93, 1, 28, "Output"]
}, Open  ]],
Cell[14587, 417, 912, 19, 87, "Text"],
Cell[15502, 438, 126, 2, 28, "Input"],
Cell[15631, 442, 277, 6, 30, "Text"],
Cell[15911, 450, 133, 3, 28, "Input"],
Cell[16047, 455, 1239, 22, 106, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17323, 482, 102, 1, 44, "Subsection"],
Cell[17428, 485, 1059, 15, 87, "Text"],
Cell[CellGroupData[{
Cell[18512, 504, 125, 2, 28, "Input"],
Cell[18640, 508, 102, 2, 33, "Output"]
}, Open  ]],
Cell[18757, 513, 230, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[19012, 522, 120, 2, 28, "Input"],
Cell[19135, 526, 94, 1, 28, "Output"]
}, Open  ]],
Cell[19244, 530, 340, 7, 30, "Text"],
Cell[CellGroupData[{
Cell[19609, 541, 151, 3, 28, "Input"],
Cell[19763, 546, 124, 2, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19924, 553, 123, 2, 28, "Input"],
Cell[20050, 557, 91, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20178, 563, 122, 2, 28, "Input"],
Cell[20303, 567, 111, 2, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20451, 574, 140, 3, 28, "Input"],
Cell[20594, 579, 92, 1, 28, "Output"]
}, Open  ]],
Cell[20701, 583, 752, 14, 49, "Text"],
Cell[CellGroupData[{
Cell[21478, 601, 115, 2, 28, "Input"],
Cell[21596, 605, 90, 2, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21723, 612, 140, 3, 28, "Input"],
Cell[21866, 617, 73, 1, 28, "Output"]
}, Open  ]],
Cell[21954, 621, 632, 12, 49, "Text"],
Cell[CellGroupData[{
Cell[22611, 637, 215, 5, 28, "Input"],
Cell[22829, 644, 156, 3, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23022, 652, 194, 5, 28, "Input"],
Cell[23219, 659, 171, 2, 32, "Output"]
}, Open  ]],
Cell[23405, 664, 430, 8, 49, "Text"],
Cell[CellGroupData[{
Cell[23860, 676, 223, 6, 28, "Input"],
Cell[24086, 684, 174, 3, 32, "Output"]
}, Open  ]],
Cell[24275, 690, 735, 11, 68, "Text"],
Cell[25013, 703, 168, 4, 28, "Input"],
Cell[CellGroupData[{
Cell[25206, 711, 120, 2, 28, "Input"],
Cell[25329, 715, 117, 2, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25483, 722, 121, 2, 28, "Input"],
Cell[25607, 726, 144, 3, 32, "Output"]
}, Open  ]],
Cell[25766, 732, 511, 8, 68, "Text"],
Cell[26280, 742, 174, 3, 28, "Input"],
Cell[26457, 747, 493, 9, 49, "Text"],
Cell[26953, 758, 268, 7, 28, "Input"],
Cell[CellGroupData[{
Cell[27246, 769, 194, 4, 28, "Input"],
Cell[27443, 775, 140, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27620, 783, 191, 4, 28, "Input"],
Cell[27814, 789, 93, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27944, 795, 195, 4, 28, "Input"],
Cell[28142, 801, 142, 3, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28333, 810, 293, 4, 44, "Subsection"],
Cell[CellGroupData[{
Cell[28651, 818, 174, 2, 35, "Subsubsection"],
Cell[28828, 822, 987, 16, 87, "Text"],
Cell[CellGroupData[{
Cell[29840, 842, 307, 8, 28, "Input"],
Cell[30150, 852, 10019, 175, 229, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40206, 1032, 252, 7, 28, "Input"],
Cell[40461, 1041, 2659, 54, 243, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43169, 1101, 154, 2, 35, "Subsubsection"],
Cell[43326, 1105, 595, 9, 68, "Text"],
Cell[43924, 1116, 1743, 55, 99, "Text"],
Cell[45670, 1173, 1312, 36, 182, "Input"],
Cell[46985, 1211, 988, 19, 87, "Text"],
Cell[CellGroupData[{
Cell[47998, 1234, 668, 17, 28, "Input"],
Cell[48669, 1253, 6383, 118, 234, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[55101, 1377, 171, 2, 35, "Subsubsection"],
Cell[55275, 1381, 574, 12, 49, "Text"],
Cell[CellGroupData[{
Cell[55874, 1397, 632, 19, 50, "Input"],
Cell[56509, 1418, 92905, 1522, 329, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149475, 2947, 279, 4, 44, "Subsection"],
Cell[CellGroupData[{
Cell[149779, 2955, 174, 2, 35, "Subsubsection"],
Cell[149956, 2959, 556, 9, 68, "Text"],
Cell[150515, 2970, 305, 6, 30, "Text"],
Cell[150823, 2978, 561, 10, 28, "Input"],
Cell[151387, 2990, 475, 10, 49, "Text"],
Cell[CellGroupData[{
Cell[151887, 3004, 374, 7, 28, "Input"],
Cell[152264, 3013, 262, 5, 32, "Output"]
}, Open  ]],
Cell[152541, 3021, 668, 10, 49, "Text"],
Cell[CellGroupData[{
Cell[153234, 3035, 286, 5, 28, "Input"],
Cell[153523, 3042, 335, 6, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153895, 3053, 190, 4, 28, "Input"],
Cell[154088, 3059, 166, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154291, 3068, 140, 3, 28, "Input"],
Cell[154434, 3073, 120, 3, 32, "Output"]
}, Open  ]],
Cell[154569, 3079, 744, 17, 49, "Text"],
Cell[CellGroupData[{
Cell[155338, 3100, 270, 7, 28, "Input"],
Cell[155611, 3109, 166, 4, 32, "Output"]
}, Open  ]],
Cell[155792, 3116, 511, 19, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[156340, 3140, 176, 2, 35, "Subsubsection"],
Cell[156519, 3144, 755, 13, 49, "Text"],
Cell[CellGroupData[{
Cell[157299, 3161, 588, 15, 50, "Input"],
Cell[157890, 3178, 237, 7, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158164, 3190, 141, 4, 28, "Input"],
Cell[158308, 3196, 115, 2, 28, "Output"]
}, Open  ]],
Cell[158438, 3201, 287, 6, 30, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[158774, 3213, 246, 3, 44, "Subsection"],
Cell[CellGroupData[{
Cell[159045, 3220, 174, 2, 35, "Subsubsection"],
Cell[159222, 3224, 684, 16, 50, "Text"],
Cell[CellGroupData[{
Cell[159931, 3244, 233, 5, 28, "Input"],
Cell[160167, 3251, 191, 5, 49, "Output"]
}, Open  ]],
Cell[160373, 3259, 443, 8, 49, "Text"],
Cell[CellGroupData[{
Cell[160841, 3271, 360, 9, 28, "Input"],
Cell[161204, 3282, 170, 4, 47, "Output"]
}, Open  ]],
Cell[161389, 3289, 527, 21, 42, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161953, 3315, 155, 2, 35, "Subsubsection"],
Cell[162111, 3319, 2251, 77, 84, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164399, 3401, 167, 2, 35, "Subsubsection"],
Cell[164569, 3405, 810, 24, 62, "Text"],
Cell[CellGroupData[{
Cell[165404, 3433, 296, 8, 28, "Input"],
Cell[165703, 3443, 122, 3, 48, "Output"]
}, Open  ]],
Cell[165840, 3449, 280, 7, 30, "Text"],
Cell[CellGroupData[{
Cell[166145, 3460, 350, 9, 28, "Input"],
Cell[166498, 3471, 114, 1, 28, "Output"]
}, Open  ]],
Cell[166627, 3475, 215, 4, 30, "Text"],
Cell[166845, 3481, 765, 12, 87, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[167659, 3499, 300, 4, 44, "Subsection"],
Cell[167962, 3505, 571, 9, 49, "Text"],
Cell[CellGroupData[{
Cell[168558, 3518, 204, 3, 35, "Subsubsection"],
Cell[168765, 3523, 688, 12, 68, "Text"],
Cell[169456, 3537, 369, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[169850, 3548, 132, 2, 28, "Input"],
Cell[169985, 3552, 95, 1, 28, "Output"]
}, Open  ]],
Cell[170095, 3556, 131, 2, 28, "Input"],
Cell[170229, 3560, 274, 6, 49, "Text"],
Cell[170506, 3568, 142, 2, 28, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170685, 3575, 203, 3, 35, "Subsubsection"],
Cell[170891, 3580, 444, 12, 68, "Text"],
Cell[171338, 3594, 245, 6, 30, "Text"],
Cell[171586, 3602, 233, 6, 30, "Text"],
Cell[171822, 3610, 378, 11, 30, "Text"],
Cell[172203, 3623, 652, 25, 49, "Text"],
Cell[172858, 3650, 771, 18, 68, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173666, 3673, 301, 4, 35, "Subsubsection"],
Cell[173970, 3679, 465, 12, 30, "Text"],
Cell[174438, 3693, 984, 20, 68, "Text"],
Cell[175425, 3715, 434, 11, 28, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

